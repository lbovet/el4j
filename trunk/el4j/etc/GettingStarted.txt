---+ Getting started
Every directory mentioned in this document starts from your EL4J home directory.

---++ Where is what
   * Directory "external-tools" contains by default the tools Ant and EL4Ant.
     More tools like Tomcat, JBoss and Derby database can be downloaded from 
     "http://el4j.sourceforge.net".
   * Directory "etc" contains text files about EL4J.
   * Directory "lib" contains near all needed jar and zip files for EL4J.
     Library files like JDBC driver for Oracle and DB2 (same for Derby) must be
     download from vendor's homepage.
       * Download DB2/Derby JDBC driver (db2jcc.jar and db2jcc_license_c.jar)
         from "http://www.ibm.com/developerworks/db2/downloads/jcc/".
       * Download Oracle driver (ojdbc14*.jar)
         from "http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/".
         Note: You can also use driver 10g for database version 9.
   * Directory "lib/src" contains sources from library files of directory "lib".
   * Directory "framework" contains the EL4J framework. If it does not exist
     you have to checkout it from "cvs.sourceforge.net".
   
---+ How to start
   * Set Ant (directory "external-tools/ant/bin") to your path.
   * cd framework
   * ant -f bootstrap.xml (same as "ant -f bootstrap.xml configure")
       * File "build.xml" will be created. Generates also Eclipse files 
         (".project", ".classpath and so on).
   * ant compile
       * Directory "framework/dist/classes" will be created with a folder for
         each module of the EL4J framework project. These folders contain the 
         compiled classes.
   * ant jars
       * Generated jars will take place in directory "framework/dist/lib".
   * ant start.module.eu.module-core-tests
       * JUnit tests of module-core will be started. Reports as xml files can be
         found in directory "framework/dist/junit". This command executes the
         tests with generated module jar files (command "ant jars" necessary).
   * ant startdev.module.eu.module-core-tests
       * Executes the same as before but with modules classes from directory
         "framework/dist/classes".
   * ant junit.report
       * Creates a junit website report for executed junit tests in directory
         "framework/dist/website/junit".
   * ant javadoc
       * Generates javadoc in directory "framework/dist/website/javadoc".
   * ant checkstyle
       * Checks the whole framework code with Checkstyle rules. Reports can be 
         found in directory "framework/dist/website/checkstyle".
   * ant website
       * Creates a website for the framework project in directory
         "framework/dist/website" that contain links in generated project
         report page to executed tasks junit, javadoc and checkstyle.
         
   * ant deploy.war.module.eu.module-remoting_and_interface_enrichment-tests.web
       * Re/Deploys web part of remoting test in tomcat
         (directory "external-tools/tomcat") and starts it if it is not already
         running.
   * ant startdev.module.eu.module-remoting_and_interface_enrichment-tests.gui
       * Executes the JUnit tests for module remoting based on compiled classes
         from directory "framework/dist/classes".
   
   * Now you can open eclipse and set directory "framework/workspace" as 
     workspace. Set ANT_HOME in Window/Preferences to directory 
     "external-tools/ant". Import all eclipse projects into workspace. Changed
     classes in eclipse will automatically compiled to the correct place so you
     do not have to execute "ant compile". To enable Checkstyle in Eclipse 
     please consult the documentation.
     
   * ant binrelease
       * Creates binary releases of marked modules in directory 
         "framework/dist/binaries".
   
   * ant -f bootstrap.xml distclean (or "ant distclean" if build.xml exists)
       * Cleans directory "framework/dist" and removes file "build.xml".
         Note: Generated Eclispe files remain but be sure Eclipse is not opened
         in workspace of the framework project (directory 
         "framework/workspace").
