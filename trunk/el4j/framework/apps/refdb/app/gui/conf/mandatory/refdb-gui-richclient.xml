<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" 
	"http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
    <!-- Version: $Revision$ -->
    <!-- Source: $Source$ -->
    <!-- Date: $Date$ -->
    <!-- Author: $Author$ -->

    <!-- 
        The application itself.
    -->
    <bean id="application"
        class="org.springframework.richclient.application.Application">
        <constructor-arg index="0">
            <ref bean="applicationDescriptor" />
        </constructor-arg>
        <constructor-arg index="1">
            <ref bean="refdbLifecycleAdvisor" />
        </constructor-arg>
    </bean>

    <!--
        Main bean to control the application.
    -->
    <bean id="refdbLifecycleAdvisor"
        class="ch.elca.el4j.apps.refdb.gui.ApplicationLifecycleAdvisor">
        <property name="windowCommandBarDefinitions">
            <value>classpath:refdb/commands.xml</value>
        </property>
        <property name="startingPageId">
            <value>keywordPage</value>
        </property>
    </bean>

    <!-- 
        Describes the application.
    -->
    <bean id="applicationDescriptor"
        class="org.springframework.richclient.application.support.DefaultApplicationDescriptor">
        <property name="version">
            <value>1.0</value>
        </property>
        <property name="buildId">
            <value>20051128</value>
        </property>
    </bean>

    <!--
        Application window prototype. Implementation for multiple views per page
        is taken.
    -->
    <bean id="applicationWindowPrototype"
        class="ch.elca.el4j.services.gui.richclient.windows.MultipleViewsApplicationWindow"
        singleton="false">
    </bean>
    
    <!--
        Application page prototype. Implementation for multiple views per page
        is taken.
    -->
    <bean id="applicationPagePrototype"
        class="ch.elca.el4j.services.gui.richclient.pages.MultipleViewsApplicationPage"
        singleton="false">
    </bean>
    
    <!--
        Keyword page.
    -->
    <bean id="keywordPage"
        class="ch.elca.el4j.services.gui.richclient.pages.descriptors.MultipleViewsPageDescriptor">
        <property name="viewDescriptorsCenter">
            <ref bean="keywordView"/>
        </property>
        <property name="viewDescriptorsLeft">
            <ref bean="keywordSearchView"/>
        </property>
    </bean>

    <!--
        Keyword view descriptor.
    -->
    <bean id="keywordView"
        class="ch.elca.el4j.services.gui.richclient.support.LookupViewDescriptor">
        <property name="viewPrototypeBeanName">
            <idref bean="keywordViewTarget" />
        </property>    
    </bean>

    <!-- 
        Keyword view target. Must be prototype!
    -->
    <bean id="keywordViewTarget"
        class="ch.elca.el4j.apps.refdb.gui.views.KeywordView"
        singleton="false">
        <property name="referenceService">
            <ref bean="referenceService" />
        </property>
        <property name="beanTableModel">
            <ref bean="keywordBeanTableModel" />
        </property>
        <property name="beanExecutors">
            <list>
                <ref bean="keywordPropertiesExecutor"/>
                <ref bean="keywordDeleteExecutor"/>
                <ref bean="keywordSelectAllExecutor"/>
                <ref bean="keywordCreateNewExecutor"/>
            </list>
        </property>
    </bean>

    <!--
        Keyword search view descriptor.
    -->
    <bean id="keywordSearchView"
        class="ch.elca.el4j.services.gui.richclient.support.LookupViewDescriptor">
        <property name="viewPrototypeBeanName">
            <idref bean="keywordSearchViewTarget" />
        </property>    
    </bean>
    
    <!--
        Keyword search view target. Must be prototype!
    -->
    <bean id="keywordSearchViewTarget"
        class="ch.elca.el4j.services.gui.richclient.views.SearchView"
        singleton="false">
        <property name="searchItems">
            <list>
                <bean class="ch.elca.el4j.services.gui.search.LikeSearchItem">
                    <property name="targetProperty">
                        <value>name</value>
                    </property>
                </bean>
                <bean class="ch.elca.el4j.services.gui.search.LikeSearchItem">
                    <property name="targetProperty">
                        <value>description</value>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
    
    
    <!-- 
        General keyword bean properties.
    -->
    <bean id="generalKeywordProperties" abstract="true">
        <property name="beanClass">
            <value>ch.elca.el4j.apps.keyword.dto.KeywordDto</value>
        </property>
    </bean>    

    <!-- 
        Table model for keyword dtos.
    -->
    <bean id="keywordBeanTableModel"
        class="ch.elca.el4j.services.gui.richclient.models.BeanTableModel"
        parent="generalKeywordProperties"
        singleton="false">
        <property name="columnPropertyNames">
            <list>
                <value>name</value>
                <value>description</value>
            </list>
        </property>
    </bean>

    <!-- 
        Executor to change keyword properties.
    -->
    <bean id="keywordPropertiesExecutor"
        class="ch.elca.el4j.services.gui.richclient.executors.BeanPropertiesExecutor"
        singleton="false">
        <property name="propertiesFormBeanNames">
            <idref bean="keywordPropertiesFormGeneral" />
        </property>
        <property name="dialogBeanName">
            <idref bean="keywordPropertiesApplicationDialog" />
        </property>
    </bean>
    
        <!-- 
            Form that describs which keyword properties should be displayed.
        -->
        <bean id="keywordPropertiesFormGeneral"
            class="ch.elca.el4j.services.gui.richclient.forms.BeanPropertiesForm"
            singleton="false">
            <property name="shownBeanProperties">
                <list>
                    <value>key</value>
                    <value>name</value>
                    <value>description</value>
                </list>
            </property>
            <property name="readOnlyBeanProperties">
                <list>
                    <value>key</value>
                </list>
            </property>
            <property name="propertiesId">
                <value>keywordFormGeneral</value>
            </property>
        </bean>
    
        <!--
            Application dialog to change properties of a keyword.
        -->
        <bean id="keywordPropertiesApplicationDialog"
            class="ch.elca.el4j.apps.refdb.gui.dialogs.KeywordPropertiesApplicationDialog"
            singleton="false">
            <property name="propertiesId">
                <value>keywordProperties</value>
            </property>            
        </bean>

    <!-- 
        Executor to delete keywords.
    -->
    <bean id="keywordDeleteExecutor"
        class="ch.elca.el4j.services.gui.richclient.executors.BeanConfirmationExecutor"
        singleton="false">
        <property name="dialogBeanName">
            <idref bean="keywordDeleteApplicationDialog" />
        </property>
        <property name="commandId">
            <value>deleteCommand</value>
        </property>
    </bean>

        <!--
            Application dialog to change properties of a keyword.
        -->
        <bean id="keywordDeleteApplicationDialog"
            class="ch.elca.el4j.apps.refdb.gui.dialogs.DeleteKeywordsConfirmationDialog"
            singleton="false">
            <property name="propertiesId">
                <value>keywordDelete</value>
            </property>
        </bean>

    <!-- 
        Executor to select all keywords.
    -->
    <bean id="keywordSelectAllExecutor"
        class="ch.elca.el4j.services.gui.richclient.executors.BeanSelectAllExecutor"
        singleton="false"/>

    <!--
        Executor to create new keywords.
    -->
    <bean id="keywordCreateNewExecutor"
        class="ch.elca.el4j.services.gui.richclient.executors.BeanWizardExecutor"
        singleton="false"
        parent="generalKeywordProperties">
        <property name="propertiesFormBeanNames">
            <idref bean="keywordPropertiesFormGeneral" />
        </property>
        <property name="dialogBeanName">
            <idref bean="keywordCreateNewWizard" />
        </property>
        <property name="commandId">
            <value>newKeywordCommand</value>
        </property>
    </bean>
    
        <!--
            Wizard to create a new keyword.
        -->
        <bean id="keywordCreateNewWizard"
            class="ch.elca.el4j.apps.refdb.gui.wizards.CreateNewKeywordWizard"
            singleton="false">
            <property name="propertiesId">
                <value>keywordCreateNew</value>
            </property>
        </bean>





    <!-- 
        Place where applications will be configured.
    -->
    <bean id="applicationObjectConfigurer"
        class="org.springframework.richclient.application.config.DefaultApplicationObjectConfigurer">
        <constructor-arg index="0">
            <ref bean="messageSource" />
        </constructor-arg>
        <constructor-arg index="1">
            <ref bean="imageSource" />
        </constructor-arg>
        <constructor-arg index="2">
            <ref bean="iconSource" />
        </constructor-arg>
    </bean>

    <!-- 
        Sends all application events to every registered application listener.
    -->
    <bean id="applicationEventMulticaster"
        class="org.springframework.context.event.SimpleApplicationEventMulticaster" />

    <!-- 
        Where components are created and receive all needed stuff.
    -->
    <bean id="componentFactory"
        class="org.springframework.richclient.factory.DefaultComponentFactory">
        <property name="iconSource">
            <ref bean="iconSource" />
        </property>
        <property name="messageSource">
            <ref bean="messageSource" />
        </property>
    </bean>

    <!-- 
        Language specific messages will be taken from this source.
    -->
    <bean id="messageSource"
        class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>refdb.messages</value>
                <value>org.springframework.richclient.application.messages</value>
            </list>
        </property>
    </bean>

    <!-- 
        Images will be taken by this source.
    -->
    <bean id="imageSource"
        class="org.springframework.richclient.image.DefaultImageSource">
        <constructor-arg index="0">
            <ref bean="imageResourcesFactory" />
        </constructor-arg>
        <property name="brokenImageIndicator">
            <value>images/alert/error_obj.gif</value>
        </property>
    </bean>

    <!-- 
        Factory to load images by using short names that are defined in 
        property files.
    -->
    <bean id="imageResourcesFactory"
        class="org.springframework.context.support.ResourceMapFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:org/springframework/richclient/image/images.properties</value>
                <value>classpath:refdb/images.properties</value>
            </list>
        </property>
        <property name="resourceBasePath">
            <value>images/</value>
        </property>
    </bean>

    <!-- 
        Icons will be taken from this source.
    -->
    <bean id="iconSource"
        class="org.springframework.richclient.image.DefaultIconSource">
        <constructor-arg index="0">
            <ref bean="imageSource" />
        </constructor-arg>
    </bean>

    <!-- 
        Sets the look and feel for the application.
    -->
    <bean id="lookAndFeelConfigurer"
        class="org.springframework.richclient.application.config.JGoodiesLooksConfigurer">
        <property name="popupDropShadowEnabled" value="false" />
        <property name="theme">
            <bean class="com.jgoodies.looks.plastic.theme.ExperienceBlue" />
        </property>
    </bean>

    <!-- 
        Intercepts displayed components (i.e. for highlighting a component on a
        validation error).
    -->
    <bean id="formComponentInterceptorFactory"
        class="org.springframework.richclient.form.builder.support.ChainedInterceptorFactory">
        <property name="interceptorFactories">
            <list>
                <bean
                    class="org.springframework.richclient.form.builder.support.OverlayValidationInterceptorFactory" />
                <bean class="org.springframework.richclient.text.TextComponentPopupInterceptorFactory" />
                <bean class="org.springframework.richclient.form.builder.support.ColorValidationInterceptorFactory">
                    <property name="errorColor">
                        <value>255,245,245</value>
                    </property>
                </bean>
                <bean class="org.springframework.richclient.list.ComboBoxAutoCompletionInterceptorFactory">
                    <property name="messageSource">
                        <ref bean="messageSource" />
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!--
        Fetches names, labels, captions and descriptions displayed by components
        from message source.
    -->
    <bean id="formPropertyFaceDescriptorSource"
        class="org.springframework.binding.form.support.MessageSourceFormPropertyFaceDescriptorSource" />
    
    <!-- 
        Validation rules for input data.
    -->
    <bean id="rulesSource"
        class="ch.elca.el4j.apps.refdb.rules.RefdbValidationRulesSource" />
    
<!-- 
    <bean id="binderSelectionStrategy"
        class="org.springframework.richclient.form.binding.swing.SwingBinderSelectionStrategy">
        <property name="bindersForPropertyTypes">
            <map>
                <!- -                <entry>
                    <key>
                    <value type="java.lang.Class">java.util.Date</value>
                    </key>
                    <bean 
                    class="org.springframework.richclient.samples.petclinic.ui.binder.CustomDatePickerBinder"/>
                    </entry>- ->
                <entry>
                    <key>
                        <value type="java.lang.Class">
                            org.springframework.samples.petclinic.PetType
                        </value>
                    </key>
                    <bean
                        class="org.springframework.richclient.samples.petclinic.ui.binder.PetTypeBinder">
                        <property name="clinic">
                            <ref bean="clinic" />
                        </property>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>
    -->
</beans>
