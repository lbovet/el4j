<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" 
	"http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
    <!-- Version: $Revision$ -->
    <!-- Source: $Source$ -->
    <!-- Date: $Date$ -->
    <!-- Author: $Author$ -->

    <!-- 
        The application itself. The bean with id "application" is looked up
        by the application launcher.
    -->
    <bean id="application"
        class="org.springframework.richclient.application.Application">
        <constructor-arg index="0">
            <ref bean="applicationDescriptor" />
        </constructor-arg>
        <constructor-arg index="1">
            <ref bean="applicationLifecycleAdvisor" />
        </constructor-arg>
    </bean>

    <!-- 
        Describes the application.
    -->
    <bean id="applicationDescriptor"
        class="org.springframework.richclient.application.support.DefaultApplicationDescriptor">
        <property name="version">
            <value>1.0</value>
        </property>
        <property name="buildId">
            <value>2006-01-05</value>
        </property>
    </bean>

    <!--
        Bean to control application's lifecycle. Constructor argument of 
        application.
    -->
    <bean id="applicationLifecycleAdvisor"
        class="org.springframework.richclient.application.config.DefaultApplicationLifecycleAdvisor">
        <property name="windowCommandBarDefinitions">
            <!--
                Separate spring configuration file that contains the command
                definitions.
            -->
            <value>classpath:refdb/internal/commands.xml</value>
        </property>
        <property name="startingPageId">
            <!--
                Bean with this id must be a page descriptor. This page will be
                loaded on startup.
            -->
            <value>keywordPage</value>
        </property>
    </bean>

    <!--
        Application window prototype. Implementation for multiple views per page
        is taken. Must be prototype!
    -->
    <bean id="applicationWindowPrototype"
        class="ch.elca.el4j.services.gui.richclient.windows.MultipleViewsApplicationWindow"
        singleton="false">
    </bean>

    <!--
        Application page prototype. Implementation for multiple views per page
        is taken. Must be prototype!
    -->
    <bean id="applicationPagePrototype"
        class="ch.elca.el4j.services.gui.richclient.pages.MultipleViewsApplicationPage"
        singleton="false">
    </bean>

    <!--
        Keyword page descriptor. Describs the page for keywords.
    -->
    <bean id="keywordPage"
        class="ch.elca.el4j.services.gui.richclient.pages.descriptors.MultipleViewsPageDescriptor">
        <property name="viewDescriptorsCenter">
            <!-- 
                The following view will be placed in the center of the page.
            -->
            <ref bean="keywordTableView" />
        </property>
        <property name="viewDescriptorsLeft">
            <!-- 
                The following view will be placed in the left of the page.
            -->
            <ref bean="keywordSearchView" />
        </property>
    </bean>

    <!--
        Keyword table view descriptor. Describs the keyword table view. This 
        class is needed as factory for the given viewPrototypeBeanName. 
    -->
    <bean id="keywordTableView"
        class="ch.elca.el4j.services.gui.richclient.support.LookupViewDescriptor">
        <property name="viewPrototypeBeanName">
            <idref bean="keywordTableViewTarget" />
        </property>
    </bean>

    <!-- 
        Keyword table view target. Must be prototype! Implemented by user.
    -->
    <bean id="keywordTableViewTarget"
        class="ch.elca.el4j.apps.refdb.gui.views.KeywordView"
        singleton="false">
        <property name="referenceService">
            <!--
                Is the service used in this application. For module *refdb-gui*
                this is the reference service. We get and put dtos by this
                service.
            -->
            <ref bean="referenceService" />
        </property>
        <property name="beanTableModel">
            <!--
                Is the table model for keyword dtos.
            -->
            <ref bean="keywordBeanTableModel" />
        </property>
        <property name="beanExecutors">
            <!--
                These are the executors for this view.
            -->
            <list>
                <!--
                    Executor to change keyword data.
                -->
                <ref bean="keywordPropertiesExecutor" />
                <!--
                    Executor to delete keywords.
                -->
                <ref bean="keywordDeleteExecutor" />
                <!--
                    Executor to select all displayed keywords.
                -->
                <ref bean="keywordSelectAllExecutor" />
                <!--
                    Executor to create a keyword.
                -->
                <ref bean="keywordCreateNewExecutor" />
            </list>
        </property>
    </bean>

    <!--
        Keyword search view descriptor. Describs the keyword search view. This 
        class is needed as factory for the given viewPrototypeBeanName.
    -->
    <bean id="keywordSearchView"
        class="ch.elca.el4j.services.gui.richclient.support.LookupViewDescriptor">
        <property name="viewPrototypeBeanName">
            <idref bean="keywordSearchViewTarget" />
        </property>
    </bean>

    <!--
        Keyword search view target. Must be prototype!
    -->
    <bean id="keywordSearchViewTarget"
        class="ch.elca.el4j.services.gui.richclient.views.SearchView"
        singleton="false">
        <property name="searchItems">
            <!--
                These are the search items used for this view.
            -->
            <list>
                <!--
                    Search item for keyword property name.
                    This allows a like search.
                -->
                <bean class="ch.elca.el4j.services.gui.search.LikeSearchItem">
                    <property name="targetProperty">
                        <value>name</value>
                    </property>
                </bean>
                <!--
                    Search item for keyword property description.
                    This allows a like search.
                -->
                <bean class="ch.elca.el4j.services.gui.search.LikeSearchItem">
                    <property name="targetProperty">
                        <value>description</value>
                    </property>
                </bean>
            </list>
        </property>
    </bean>


    <!-- 
        Abstract bean. General keyword bean properties.
    -->
    <bean id="generalKeywordProperties" abstract="true">
        <property name="beanClass">
            <value>ch.elca.el4j.apps.keyword.dto.KeywordDto</value>
        </property>
    </bean>

    <!-- 
        Table model for keyword dtos. Extends bean "generalKeywordProperties".
    -->
    <bean id="keywordBeanTableModel"
        class="ch.elca.el4j.services.gui.richclient.models.BeanTableModel"
        parent="generalKeywordProperties" singleton="false">
        <property name="columnPropertyNames">
            <list>
                <!--
                    List properties that must be displayed in shown table. The 
                    order here is the same in shown table.
                -->
                <value>name</value>
                <value>description</value>
            </list>
        </property>
    </bean>

    <!-- 
        Executor to change keyword properties.
    -->
    <bean id="keywordPropertiesExecutor"
        class="ch.elca.el4j.services.gui.richclient.executors.BeanPropertiesExecutor"
        singleton="false">
        <property name="propertiesFormBeanNames">
            <!--
                Displayed property forms. Here only one is diplayed for all 
                keyword properties.
            -->
            <idref bean="keywordPropertiesFormAll" />
        </property>
        <property name="dialogBeanName">
            <!--
                Dialog to display.
            -->
            <idref bean="keywordPropertiesApplicationDialog" />
        </property>
    </bean>

    <!-- 
        Form that describs which keyword properties should be displayed.
    -->
    <bean id="keywordPropertiesFormAll"
        class="ch.elca.el4j.services.gui.richclient.forms.BeanPropertiesForm"
        singleton="false">
        <property name="shownBeanProperties">
            <!--
                Are the shown bean properties. The order is the same in 
                dialog.
            -->
            <list>
                <value>key</value>
                <value>name</value>
                <value>description</value>
            </list>
        </property>
        <property name="readOnlyBeanProperties">
            <!--
                Are shown but read only bean properties.
            -->
            <list>
                <value>key</value>
            </list>
        </property>
        <property name="propertiesId">
            <value>keywordFormAll</value>
        </property>
    </bean>

    <!--
        Application dialog to change properties of a keyword.
        Implemented by user.
    -->
    <bean id="keywordPropertiesApplicationDialog"
        class="ch.elca.el4j.apps.refdb.gui.dialogs.KeywordPropertiesApplicationDialog"
        singleton="false">
        <property name="propertiesId">
            <value>keywordProperties</value>
        </property>
    </bean>

    <!-- 
        Executor to delete keywords.
    -->
    <bean id="keywordDeleteExecutor"
        class="ch.elca.el4j.services.gui.richclient.executors.BeanConfirmationExecutor"
        singleton="false">
        <property name="dialogBeanName">
            <!--
                Dialog to display.
            -->
            <idref bean="keywordDeleteApplicationDialog" />
        </property>
        <property name="commandId">
            <value>deleteCommand</value>
        </property>
    </bean>

    <!--
        Application dialog to change properties of a keyword.
    -->
    <bean id="keywordDeleteApplicationDialog"
        class="ch.elca.el4j.apps.refdb.gui.dialogs.DeleteKeywordsConfirmationDialog"
        singleton="false">
        <property name="propertiesId">
            <value>keywordDelete</value>
        </property>
    </bean>

    <!-- 
        Executor to select all keywords.
    -->
    <bean id="keywordSelectAllExecutor"
        class="ch.elca.el4j.services.gui.richclient.executors.BeanSelectAllExecutor"
        singleton="false" />

    <!--
        Executor to create new keywords. 
        Extends bean "generalKeywordProperties".
    -->
    <bean id="keywordCreateNewExecutor"
        class="ch.elca.el4j.services.gui.richclient.executors.BeanWizardExecutor"
        singleton="false" parent="generalKeywordProperties">
        <property name="propertiesFormBeanNames">
            <!--
                Displayed property forms. Here only one is diplayed for most 
                keyword properties.
            -->
            <idref bean="keywordPropertiesFormNormal" />
        </property>
        <property name="dialogBeanName">
            <!--
                Dialog to display.
            -->
            <idref bean="keywordCreateNewWizard" />
        </property>
        <property name="commandId">
            <value>newKeywordCommand</value>
        </property>
    </bean>

    <!-- 
        Form that describs which keyword properties should be displayed.
    -->
    <bean id="keywordPropertiesFormNormal"
        class="ch.elca.el4j.services.gui.richclient.forms.BeanPropertiesForm"
        singleton="false">
        <property name="shownBeanProperties">
            <!--
                Are the shown bean properties. The order is the same in 
                dialog.
            -->
            <list>
                <value>name</value>
                <value>description</value>
            </list>
        </property>
        <property name="propertiesId">
            <value>keywordFormNormal</value>
        </property>
    </bean>

    <!--
        Wizard to create a new keyword. Implemented by user.
    -->
    <bean id="keywordCreateNewWizard"
        class="ch.elca.el4j.apps.refdb.gui.wizards.CreateNewKeywordWizard"
        singleton="false">
        <property name="propertiesId">
            <value>keywordCreateNew</value>
        </property>
    </bean>




    <!-- 
        Sends all application events to every registered application listener.
        Used views are registered application listeners. The bean with id 
        "applicationEventMulticaster" is looked up by the application context.
    -->
    <bean id="applicationEventMulticaster"
        class="org.springframework.context.event.SimpleApplicationEventMulticaster" />

    <!-- 
        Place where application objects will be configured. The bean with id 
        "applicationObjectConfigurer" is looked up by the application services
        class.
    -->
    <bean id="applicationObjectConfigurer"
        class="org.springframework.richclient.application.config.DefaultApplicationObjectConfigurer">
        <constructor-arg index="0">
            <ref bean="messageSource" />
        </constructor-arg>
        <constructor-arg index="1">
            <ref bean="imageSource" />
        </constructor-arg>
        <constructor-arg index="2">
            <ref bean="iconSource" />
        </constructor-arg>
    </bean>

    <!-- 
        Where components are created and can receive all needed stuff. The bean 
        with id "componentFactory" is looked up by the application services 
        class.
    -->
    <bean id="componentFactory"
        class="org.springframework.richclient.factory.DefaultComponentFactory">
        <property name="iconSource">
            <ref bean="iconSource" />
        </property>
        <property name="messageSource">
            <ref bean="messageSource" />
        </property>
    </bean>

    <!-- 
        Language specific messages will be taken from this source.
    -->
    <bean id="messageSource"
        class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!--
                    Takes the localized messages. First line means that file
                    with name "messages_de.properties" will be taken from 
                    directory "refdb/properties" if current language is German.
                    If this file does not exist file with name 
                    "messages.properties" will be taken. Same for the second 
                    line.
                -->
                <value>refdb.properties.messages</value>
                <value>org.springframework.richclient.application.messages</value>
            </list>
        </property>
    </bean>

    <!-- 
        Images will be taken by this source.
    -->
    <bean id="imageSource"
        class="org.springframework.richclient.image.DefaultImageSource">
        <constructor-arg index="0">
            <ref bean="imageResourcesFactory" />
        </constructor-arg>
        <property name="brokenImageIndicator">
            <!-- 
                This image will be taken if the requested image does not exist.
            -->
            <value>images/alert/error_obj.gif</value>
        </property>
    </bean>

    <!-- 
        Factory to load images by using short names that are defined in 
        property files.
    -->
    <bean id="imageResourcesFactory"
        class="org.springframework.context.support.ResourceMapFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:org/springframework/richclient/image/images.properties</value>
                <value>classpath:refdb/properties/images.properties</value>
            </list>
        </property>
        <property name="resourceBasePath">
            <value>images/</value>
        </property>
    </bean>

    <!-- 
        Icons will be taken from this source.
    -->
    <bean id="iconSource"
        class="org.springframework.richclient.image.DefaultIconSource">
        <constructor-arg index="0">
            <ref bean="imageSource" />
        </constructor-arg>
    </bean>

    <!-- 
        Sets the look and feel for the application. The bean 
        with id "lookAndFeelConfigurer" is looked up by the application
        services class.
    -->
    <bean id="lookAndFeelConfigurer"
        class="org.springframework.richclient.application.config.JGoodiesLooksConfigurer">
        <property name="popupDropShadowEnabled" value="false" />
        <property name="theme">
            <bean class="com.jgoodies.looks.plastic.theme.ExperienceBlue" />
        </property>
    </bean>

    <!-- 
        Intercepts displayed components (i.e. for highlighting a component on a
        validation error). The bean with id "formComponentInterceptorFactory" 
        is looked up by the application services class.
    -->
    <bean id="formComponentInterceptorFactory"
        class="org.springframework.richclient.form.builder.support.ChainedInterceptorFactory">
        <property name="interceptorFactories">
            <list>
                <bean
                    class="org.springframework.richclient.form.builder.support.OverlayValidationInterceptorFactory" />
                <bean
                    class="org.springframework.richclient.text.TextComponentPopupInterceptorFactory" />
                <bean
                    class="org.springframework.richclient.form.builder.support.ColorValidationInterceptorFactory">
                    <property name="errorColor">
                        <value>255,245,245</value>
                    </property>
                </bean>
                <bean
                    class="org.springframework.richclient.list.ComboBoxAutoCompletionInterceptorFactory">
                    <property name="messageSource">
                        <ref bean="messageSource" />
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!--
        Fetches names, labels, captions and descriptions displayed by components
        from message source. The bean with id "formPropertyFaceDescriptorSource" 
        is looked up by the application services class.
    -->
    <bean id="formPropertyFaceDescriptorSource"
        class="org.springframework.binding.form.support.MessageSourceFormPropertyFaceDescriptorSource" />

    <!-- 
        Validation rules for input data. Used in all forms. The bean with id 
        "rulesSource" is looked up by the application services class.
    -->
    <bean id="rulesSource"
        class="ch.elca.el4j.apps.refdb.rules.RefdbValidationRulesSource" />
</beans>
