/*
 * EL4J, the Extension Library for the J2EE, adds incremental enhancements to
 * the spring framework, http://el4j.sf.net
 * Copyright (C) 2008 by ELCA Informatique SA, Av. de la Harpe 22-24,
 * 1000 Lausanne, Switzerland, http://www.elca.ch
 *
 * EL4J is published under the GNU Lesser General Public License (LGPL)
 * Version 2.1. See http://www.gnu.org/licenses/
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * For alternative licensing, please contact info@elca.ch
 */
package ch.elca.el4j.core.aop;

import org.springframework.aop.Advisor;
import org.springframework.aop.framework.ProxyFactory;
import org.springframework.beans.factory.FactoryBean;

import ch.elca.el4j.util.collections.impl.WeakIdentityHashMap;

/**
 * A generic {@link FactoryBean} that wraps another factory and proxies the beans generated by that factory. 
 *
 * <script type="text/javascript">printFileStatus
 *   ("$URL$",
 *    "$Revision$",
 *    "$Date$",
 *    "$Author$"
 * );</script>
 *
 * @author Stefan Wismer (SWI)
 */
public class GenericProxiedFactoryBean implements FactoryBean {
	
	/**
	 * A cache to store original and wrapped beans.
	 */
	private static WeakIdentityHashMap<Object, Object> s_proxyCache = new WeakIdentityHashMap<Object, Object>();
	
	/**
	 * The wrapped {@link FactoryBean}.
	 */
	private final FactoryBean m_factoryBean;
	
	/**
	 * The interceptors to add to all beans generated by the wrapped factory.
	 */
	private final Advisor[] m_interceptors;

	/**
	 * @param factoryBean     the {@link FactoryBean} to wrap
	 * @param interceptors    the interceptors to apply to the beans created by the wrapped factory
	 */
	public GenericProxiedFactoryBean(FactoryBean factoryBean, Advisor[] interceptors) {
		m_factoryBean = factoryBean;
		m_interceptors = interceptors;
	}
	
	/**
	 * @param original    the object to wrap
	 * @return            the wrapped object
	 */
	protected Object wrap(Object original) {
		if (s_proxyCache.containsKey(original)) {
			return s_proxyCache.get(original);
		} else {
			// create proxy
			Object wrapped = null;
			
			ProxyFactory factory = new ProxyFactory(original);
			for (Advisor advisor : m_interceptors) {
				factory.addAdvice(advisor.getAdvice());
			}
			
			wrapped = factory.getProxy();
			
			s_proxyCache.put(original, wrapped);
			return wrapped;
		}
	}

	/** {@inheritDoc} */
	public Object getObject() throws Exception {
		return wrap(m_factoryBean.getObject());
	}

	/** {@inheritDoc} */
	public Class<?> getObjectType() {
		return m_factoryBean.getObjectType();
	}

	/** {@inheritDoc} */
	public boolean isSingleton() {
		return m_factoryBean.isSingleton();
	}
}
