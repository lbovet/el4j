H1 Version History and Future Plans for Cacher/Offliner

H2 Before "0"
Before the name Cacher was used, the project started off as UniversalData / DataExpressionBrowser. It displayed simple tables of data. Its advantage was that it worked with the abstraction of a DataExpression which was very generic. This approach was found to be insufficient when dealing with database objects that carry associations between each other. 

The next installation was a generic DatabaseBrowser. It allowed database entities to be accessed in a strongly typed way and references to be manipulated. It still exists (so does the DE-browser) and could be very useful in other scenarios than the one the cacher was made for. One of its modules, namely the DetailWidgets for displaying and editing typed data (and for editing database instances by displaying a list of DetailWidgets for all the object's properties) provided some of the ideas for the current version of a table data widget in the EL4J framework.

Caching was a submodule in each of these projects. The difference to the cacher ("0" upwards) is that the cacher is designed to be a separate pluggable module independent of the client/user interface/gui/business logic. However, an imputations demo exists that shows the cacher in operation and that is based on, though much less generic than, the database browser. This demo itself is split into a generic GUI/database part and a specific imputations part.

H2 Cacher "0"
This first version of the cacher provided an independent module for all caching-related tasks and a first version of graph walking with a separated walker/visitor implementation and algorithm. It defined the cacher interface with synchronize and cache operations.

H2 Cacher 0.1
This was completed on the 31st of July 2008 and features, compared to "0"
- An aspects package. This separates aspects the cacher or graph walker used like "keyed" or "link" (i.e. from a parent to a child object) from implementations (hibernate, reflection etc.).
- A new graph walker and node visitor package. The walker was completely rewritten to take advantage of the aspects package and use only generic access to its graph objects and to allow for some optimizations. The node visitor can override objects' states in one graph if it (or the cacher) has the necessary information from a previously handled graph reducing unnecessary database or remoting calls.
- Split between client and server. A caching server now runs on the server to allow chunking operations.
- Chunking. A strategy can be given for each class that allows chunks of objects to be sent to the server rather than a new remoting call for each object.
- Recovery from confclicts. All conflicted objects are returned with their key and version set correctly for the remote database allowing the user to attempt a manual recommit if he can deal with the conflict's source.
- More tests and example for the new graph walker.


H2 Cacher 0.5
Cacher 0.5 allows multiple edit cache/edit server/sync operations to run in any order. To allow this, it saves the base version of an object both in the database and cache while it operates on it. One nice side-effect is that versions can be restored whenever an object moves fro mone database to the other and some potential unwanted overwrites are prevented during recaching.

Conflict resolution strategies are provided that allow you to choose the version of a conflicted object you want to use.

Instead of saving it in the mapping entry, the local database state is now recomputed when needed. This is necessary for multiple sync operations. Also, the last sync version of an object it saved in the mapping entry. This allows objects unchanged since the last sync to be skipped in the next one.

H2 Offliner 0.6 
- The aspects package has been renamed object wrapper and incoroporated into module-hibernate. The cahcer only provides extra wrappables and implementations. 
- The generic to/from string handling is implemented cleanly and extensibly using strategy objects.
- The bug in the property dao is fixed; cacher properties (last commit) are written to database.
- Integer and long are both recognized by the default type distinguisher.
- Cacher renamed to offliner.

H2 Offliner 1.0-SNAPSHOT
The offliner has since been integrated into EL4J internal as module-offliner; the first version number there was 1.0-SNAPSHOT.

H2 Offliner 1.0.1-SNAPSHOT
A few minor changes: Since the EL4J base domain class was adapted to be offlining-capable, the offliner can use it directly. The strategy pattern for synchronization strategies was made cleaner and more extensible with a new interface; the chunk size for out-independent classes is now configurable via parameter. Offliner tests are finally automated and run through in a normal build thanks to a new test starter/stopper package.

H2 Project: Change tracking.
Change tracking can be used independently of the cacher to save unnecessary database/remoting operations when a set of data is checked out to memory, edited in place and recommitted. (This is caching too but the lack of a local database means that the whole key/version/cache management is unnecessary.)

Change tracking could be used to implement a wholly new kind of cacher which saves changes instead of objects and replays them to the server. Some solution to the problem of inefficiency incurred by having to send a complete version hsitory instead of just the latest changes will need to be found first.

H2 Project: Identity fixing.
There is already an identity fixer but it does not work in the cacher scenario where object identities change. Also, it is not very efficient recursing on absolutely all fields like the static singletons of the map class internals. A new object identity fixer based on the generic concept of unique keys could be made as a graph walker node visitor.

