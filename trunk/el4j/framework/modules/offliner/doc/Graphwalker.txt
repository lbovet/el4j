H1 The graph walker

The object graph walker algorithm traverses an object graph starting from a root object and 
following all <i>links</i>. The precise meaning of link is defined externally by the LinkedAspect
passed in the aspects object to the graph walker. Object graphs are directed; no other assumptions are made
(loops, multi-edges and cycles are all allowed).

The graph walker requires two parameters: An Aspects objects that provides LinkedAspect and
 UniqueKeyedAspect and a NodeVisitor that it can run on each node.

The following node colours are used: All nodes that have not yet been seen are NEW. When a node is first 
discovered, it becomes PENDING. It is then passed to preVisit which can override its color; if an override happens
it is treated as if it had been that color before (i.e. if it is overridden as PROCESSED, no further recursion will
be done). Each node can be reached as NEW at most once (exactly once unless overridden). 

A PENDING node becomes PROCESSED once all of its children have been successfully processed. Immediately before becoming
PROCESSED, a node is passed to <code>visit</code>. PROCESSED nodes are not touched again.

A node can also become ERROR, indicating a problem. All nodes with links to ERROR nodes are guaranteed to end up as ERROR
as well. Nodes become ERROR in three ways:
1. Visit throws a NodeException.
2. A linked/child node is ERROR.
3. preVisit overrides the node as ERROR.
ERROR nodes are not touched again by the graph walker.

<i>The node color determination is shared between the walker and the visitor. The walker resets its color memory 
every time it is run on a new root; any stored color information between runs must be handled by the visitor. This
is why the override mechanism exists. Only nodes that are NEW from the walker's point of view are passed to
preVisit and are guaranteed to lose NEW status afterwards (PENDING if the visitor does nothing, ERROR or PROCESSED if it
overrides).</i>

The contract between the walker and its visitor is as follows:
1. All nodes that are reachable from the current root will be passed to the visitor's <code>preVisit</code> exactly once, namely at the time they are first discovered. The visitor can return NEW to indicate normal processing or override with ERROR or PROCESSED.
2. Nodes that the visitor does not override are passed exactly once to the visitor again after all their children have been processed; they are passed to
2.1. <code>visit</code> if all children are PROCESSED.
2.2. <code>markError</code> if any child is ERROR.


The walker's algorithm on a node is:
1. If the node is not NEW, ignore it.
2. If the node is NEW, pass it to preVisit. If it overrides, mark it with the new color and ignore it.
3. If preVisit keeps it NEW, set it to PENDING and recurse on all children.
4. If any children are ERROR, mark it as ERROR and call markError on the visitor.
5. If all children are PROCESSED, call visit. If it succeeds, make the node PROCESSED, otherwise ERROR.

Node identity is determined by UniqueKey objects. Two nodes are equal if and only if their unique keys
are equal. If a different instance im memory is seen that is equal to a previously seen one, it is treated as the
same node for color purposes (<i>colors are in fact stored as a map of UniqueKey to NodeColor</i>).
