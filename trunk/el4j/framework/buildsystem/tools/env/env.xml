<?xml version="1.0"?>
<!-- Honeydew plugin definition -->
<project
  name="env"
  xmlns:antcontrib="antlib:net.sf.antcontrib"
  xmlns:el4ant="antlib:ch.elca.el4ant">
<description>
EL4Ant environment plugin.
</description>

  <!-- Version: $Revision$ -->
  <!-- Source: $URL$ -->
  <!-- Date: $Date$ -->
  <!-- Author: $Author$ -->

  <target
    name="configure"
    description="Environment Plugin configuration target"
    depends="init.env.properties">

    <property name="env.java" value="${configure.plugin.dir}/java"/>
    <property name="env.classes" value="${configure.plugin.dir}/classes"/>

    <property
      name="plugin.env.jar"
      value="${buildsystem.dist.directory}/tools-env.jar"/>
    <property name="plugin.env.uri" value="antlib:ch.elca.el4j.tools.env"/>
    <property name="plugin.env.resource" value="ch/elca/el4j/buildsystem/tools/env/antlib.xml"/>

    <!-- Compile the plugin Java classes (generators and tasks) -->
    <!--   Create the jar file and load tasks -->
    <el4ant:buildplugin
      srcdir="${env.java}"
      destdir="${env.classes}"
      jarfile="${plugin.env.jar}"
      resource="${plugin.env.resource}"
      uri="${plugin.env.uri}">
      <classpath>
        <pathelement location="${buildsystem.lib.directory}/${buildsystem.core.jar}"/>
        <pathelement location="${buildsystem.dist.directory}/${buildsystem.core.jar}"/>
      </classpath>
      <fileset dir="${env.classes}"/>
      <fileset dir="${env.java}">
        <exclude name="**/*.java"/>
      </fileset>
      <fileset dir="${configure.plugin.dir}">
        <include name="env.xml"/>
      </fileset>
      <!-- Optional element for the jar Manifest file -->
      <manifest>
        <attribute name="Implementation-Title" value="Environment Plugin"/>
        <attribute name="Implementation-Vendor" value="ELCA Informatique SA"/>
        <attribute name="Build-Date" value="${TODAY}"/>
        <attribute name="Built-By" value="${user.name}"/>
      </manifest>
      <plugin name="env" file="env.xml"/>
    </el4ant:buildplugin>

    <!-- Include user targets -->
    <el4ant:buildgen action="include" target="env.include.startpoint"/>

    <!-- Load env properties and register a property generator -->
    <env:init
      xmlns:env="antlib:ch.elca.el4j.tools.env"/>
    
    <!-- Information for distclean -->
    <antcontrib:if>
      <istrue value="${plugin.compiled}"/>
      <antcontrib:then>
        <el4ant:projectproperties
          action="append"
          property="plugin.files"
          value="${configure.plugin.dir}/classes"/>
      </antcontrib:then>
    </antcontrib:if>

    <el4ant:hook
      action="append.last"
      name="post.javac.[module]"
      target="env.copy.module"/>
      
    <el4ant:projectproperties
      action="append"
      property="plugin.files"
      value="dist/env"/>
  </target>

  <!-- Fake init target to load plugin file -->
  <target name="init"/>
  
  <!-- Targets following the next fake target are copied into the generated
         build.xml file -->

  <target name="env.include.startpoint"/>
  
  <!-- Targets from env.xml -->
  <target name="init.env.properties">
    <property name="env.dist.properties" value="dist/env/env.properties"/>
  </target>
  
  <target name="init.env"
    depends="init.env.properties">
    
    <fail message="env.properties is not available. Perform a bootstrap.">
      <condition>
        <not>
          <available file="${env.dist.properties}"/>
        </not>
      </condition>
    </fail>
  </target>
  
  <target name="env"
    depends="init">
    
    <antcontrib:for param="it" list="${module.list}">
      <sequential>
        <antcall target="env.copy.module">
          <param name="module" value="@{it}"/>
        </antcall>
      </sequential>
    </antcontrib:for>
  </target>
  
  <target name="env.copy.module"
    depends="init,init.env">
    
    <el4ant:extendedproperty
      name="module.env.enable.property"
      value="env.enable.${module}"/>
    <el4ant:extendedproperty
      name="module.env.enable.value"
      value="${env.enable.${module}}"/>
    
    <antcontrib:if>
      <and>
        <isset property="${module.env.enable.property}"/>
        <istrue value="${module.env.enable.value}"/>
      </and>
      <then>
        
        <copy
          file="${env.dist.properties}"
          todir="dist/classes/${module}/env"
          overwrite="true"/>
      </then>
    </antcontrib:if>
  </target>
  <!-- End env.xml -->
</project>
