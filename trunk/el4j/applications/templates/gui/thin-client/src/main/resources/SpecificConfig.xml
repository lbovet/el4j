<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
    
    <!--
    <import resource="classpath:scenarios/remoting/common/*.xml"/>
    -->
    <bean id="httpInvokerProtocol" class="ch.elca.el4j.services.remoting.protocol.HttpInvoker">
        <property name="serviceHost">
            <value>${jee-web.host}</value>
        </property>
        <property name="servicePort">
            <value>${jee-web.port}</value>
        </property>
        <property name="contextPath">
            <value>${jee-web.context}</value>
        </property>
    </bean>
    
    
    <bean id="abstractHttpInvokerProxyFactoryBean" abstract="true">
        <property name="remoteProtocol">
            <ref bean="httpInvokerProtocol" />
        </property>
    </bean>
    
    <bean id="referenceService" parent="abstractHttpInvokerProxyFactoryBean"
        class="ch.elca.el4j.services.remoting.RemotingProxyFactoryBean">
        <property name="serviceInterface">
            <value>ch.elca.el4j.apps.refdb.service.ReferenceService</value>
        </property>
    </bean>
    
        <bean id="keywordDao" parent="abstractHttpInvokerProxyFactoryBean"
         class="ch.elca.el4j.services.remoting.RemotingProxyFactoryBean">
        <property name="serviceInterface">
            <value>ch.elca.el4j.apps.keyword.dao.KeywordDao</value>
        </property>
    </bean>
    
    <bean id="linkDao" parent="abstractHttpInvokerProxyFactoryBean"
        class="ch.elca.el4j.services.remoting.RemotingProxyFactoryBean">
        <property name="serviceInterface">
            <value>ch.elca.el4j.apps.refdb.dao.LinkDao</value>
        </property>
    </bean>
    
    <bean id="formalPublicationDao" parent="abstractHttpInvokerProxyFactoryBean"
        class="ch.elca.el4j.services.remoting.RemotingProxyFactoryBean">
        <property name="serviceInterface">
            <value>ch.elca.el4j.apps.refdb.dao.FormalPublicationDao</value>
        </property>
    </bean>
    
    <bean id="bookDao" parent="abstractHttpInvokerProxyFactoryBean"
        class="ch.elca.el4j.services.remoting.RemotingProxyFactoryBean">
        <property name="serviceInterface">
            <value>ch.elca.el4j.apps.refdb.dao.BookDao</value>
        </property>
    </bean>
    
    <bean id="annotationDao" parent="abstractHttpInvokerProxyFactoryBean"
        class="ch.elca.el4j.services.remoting.RemotingProxyFactoryBean">
        <property name="serviceInterface">
            <value>ch.elca.el4j.apps.refdb.dao.AnnotationDao</value>
        </property>
    </bean>
    
    <bean id="fileDao" parent="abstractHttpInvokerProxyFactoryBean"
        class="ch.elca.el4j.services.remoting.RemotingProxyFactoryBean">
        <property name="serviceInterface">
            <value>ch.elca.el4j.apps.refdb.dao.FileDao</value>
        </property>
    </bean>
    
    <bean id="fileDescriptorViewDao" parent="abstractHttpInvokerProxyFactoryBean"
        class="ch.elca.el4j.services.remoting.RemotingProxyFactoryBean">
        <property name="serviceInterface">
            <value>ch.elca.el4j.apps.refdb.dao.FileDescriptorViewDao</value>
        </property>
    </bean>
    
    <!-- example how to override default configurations. See ch.elca.el4j.demos.gui.MainFormMDIXML.initialize() -->
    <bean id="overrideConfig" class="ch.elca.el4j.util.config.GenericConfig" lazy-init="true" scope="prototype">
        <!-- parent will be set in code -->
        <property name="overrideMap">
            <map>
                <entry key="invalidColor">
                    <bean class="java.awt.Color">
                        <constructor-arg type="int" value="255"/>
                        <constructor-arg type="int" value="64"/>
                        <constructor-arg type="int" value="64"/>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>
    
</beans>