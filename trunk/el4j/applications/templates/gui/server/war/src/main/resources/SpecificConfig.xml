<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-2.5.xsd">
    
     <!-- FILE refdb-dao:scenarios/dataaccess/hibernate/refdb/refdb-core-hibernate-config.xml -->
 
  	 <!--  we show here one old-style dao configuration (the nicer way is to auto collect them, see the
  	        context:component-scan section) -->
     <bean id="linkDao" parent="abstractDao" class="ch.elca.el4j.apps.refdb.dao.impl.hibernate.HibernateLinkDao"/>
     
      
       <!--  This section scans for DAOs annotated with @AutocollectedGenericDao that should be 
 	       added to the spring application context (as beans). Later, the DAO Registry
 	       automatically collects these DAOs. -->
        <!-- 	The attribute base-packages indicates the packages where we look for DAOs  -->	       
 	<context:component-scan use-default-filters="false"
 		annotation-config="false"	
 		base-package="ch.elca.el4j.apps.keyword.dao,ch.elca.el4j.apps.refdb.dao.impl.hibernate">
 		<context:include-filter type="annotation"
 			expression="ch.elca.el4j.services.persistence.generic.dao.AutocollectedGenericDao" />
 	</context:component-scan>
    

     <!-- Convenience Hibernate Session Factory Bean: it autocollects all @entity-annotated classes in 
           the Java packages given under the property autoDetectEntityPackage -->
     <bean id="sessionFactory" class="ch.elca.el4j.services.persistence.hibernate.entityfinder.EntityDetectorAnnotationSessionFactoryBean">
     
     		<!-- the packages that entity auto-detection will browse.	-->
         <property name="autoDetectEntityPackage">
            <list>
 	         <value>ch.elca.el4j.apps.keyword.dom</value>
              <value>ch.elca.el4j.apps.refdb.dom</value>        
 	       </list>
       	</property>
         <property name="hibernateProperties">
             <props>
                	<prop key="hibernate.dialect">${databaseDialect}</prop>
                 <prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>
                 <prop key="hibernate.max_fetch_depth">3</prop>
             </props>
         </property>
         <property name="useTransactionAwareDataSource">
             <value>true</value>
         </property>
         <property name="dataSource">
             <ref bean="dataSource"/>
         </property>
     </bean>   
     
    <!-- FILE swing-demo-server:scenarios/remoting/server/web/httpInvoker-server-config.xml -->
 
    <!--
    <import resource="classpath:scenarios/remoting/common/*.xml"/>
    -->
    <bean id="httpInvokerProtocol" class="ch.elca.el4j.services.remoting.protocol.HttpInvoker">
        <property name="serviceHost">
            <value>${jee-web.host}</value>
        </property>
        <property name="servicePort">
            <value>${jee-web.port}</value>
        </property>
        <property name="contextPath">
            <value>${jee-web.context}</value>
        </property>
    </bean>
     
     <bean id="abstractHttpInvokerServiceExporter" abstract="true">
         <property name="remoteProtocol">
             <ref bean="httpInvokerProtocol" />
         </property>        
     </bean>
     
     <bean id="httpInvokerRefdbServiceExporter" parent="abstractHttpInvokerServiceExporter"
         class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
         <property name="serviceInterface">
             <value>ch.elca.el4j.apps.refdb.service.ReferenceService</value>
         </property>
         <property name="service">
             <idref bean="referenceService" />
         </property>    
        </bean>
     
     <bean id="httpInvokerKeywordDaoExporter" parent="abstractHttpInvokerServiceExporter"
         class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
         <property name="serviceInterface">
             <value>ch.elca.el4j.apps.keyword.dao.KeywordDao</value>
         </property>
         <property name="service">
             <idref bean="keywordDao" />
         </property>    
     </bean>
     
     <bean id="httpInvokerLinkDaoExporter" parent="abstractHttpInvokerServiceExporter"
         class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
         <property name="serviceInterface">
             <value>ch.elca.el4j.apps.refdb.dao.LinkDao</value>
         </property>
         <property name="service">
             <idref bean="linkDao" />
         </property>    
     </bean>
     
     <bean id="httpInvokerFormalPublicationDaoExporter" parent="abstractHttpInvokerServiceExporter"
         class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
         <property name="serviceInterface">
             <value>ch.elca.el4j.apps.refdb.dao.FormalPublicationDao</value>
         </property>
         <property name="service">
             <idref bean="formalPublicationDao" />
         </property>    
     </bean>
     
     <bean id="httpInvokerBookDaoExporter" parent="abstractHttpInvokerServiceExporter"
         class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
         <property name="serviceInterface">
             <value>ch.elca.el4j.apps.refdb.dao.BookDao</value>
         </property>
         <property name="service">
             <idref bean="bookDao" />
         </property>    
     </bean>
     
     <bean id="httpInvokerAnnotationDaoExporter" parent="abstractHttpInvokerServiceExporter"
         class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
         <property name="serviceInterface">
             <value>ch.elca.el4j.apps.refdb.dao.AnnotationDao</value>
         </property>
         <property name="service">
             <idref bean="annotationDao" />
         </property>    
     </bean>
     
     <bean id="httpInvokerFileDaoExporter" parent="abstractHttpInvokerServiceExporter"
         class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
         <property name="serviceInterface">
             <value>ch.elca.el4j.apps.refdb.dao.FileDao</value>
         </property>
         <property name="service">
             <idref bean="fileDao" />
         </property>    
     </bean>
     
     <bean id="httpInvokerFileDescriptorViewDaoExporter" parent="abstractHttpInvokerServiceExporter"
         class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
         <property name="serviceInterface">
             <value>ch.elca.el4j.apps.refdb.dao.FileDescriptorViewDao</value>
         </property>
         <property name="service">
             <idref bean="fileDescriptorViewDao" />
         </property>
     </bean> 
      
</beans>      