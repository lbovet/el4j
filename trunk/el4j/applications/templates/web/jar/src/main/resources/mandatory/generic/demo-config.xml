<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

    <!-- $Revision$ -->
    <!-- $URL$ -->
    <!-- $Date$ -->
    <!-- $Author$ -->

	<!-- NOTE: This is sort of an unusually "monolithic" EL4J configuration.
	           It is only used to simplify the configuration of this
	           demo application. In a real world application, the beans herein
	           will be scattered in several config files of different EL4J modules. -->



	<!--
	*********************************************************************************
	  Hibernate related beans:
	*********************************************************************************
	-->
	
	<!-- Hibernate Session Factory Bean -->
	<bean id="hibernateSessionFactory"
	   class="ch.elca.el4j.services.persistence.hibernate.entityfinder.EntityDetectorAnnotationSessionFactoryBean">
		
		<property name="autoDetectEntityPackage">
			<list>
	        	<value>ch.elca.el4j.apps.keyword.dom</value>
	        	<value>ch.elca.el4j.seam.demo.entities</value>
	        </list>
  		</property>    
		
		<!-- The hibernate properties  -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${databaseDialect}</prop>
				<prop key="hibernate.cache.provider_class">
					org.hibernate.cache.HashtableCacheProvider
				</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>				
				<prop key="hibernate.show_sql">true</prop>
				
				<prop key="hibernate.transaction.flush_before_completion">true</prop>
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
                
			</props>
		</property>
	
		<property name="useTransactionAwareDataSource">
			<value>true</value>
		</property>
		
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	
	<bean id="sessionFactory" class="org.jboss.seam.ioc.spring.SeamManagedSessionFactoryBean">
        <property name="sessionName" value="hibernateSession" />
    </bean>
    
    <bean id="conflicts" class="ch.elca.el4j.seam.generic.Temporary" />
    
	
	<!--
	*********************************************************************************
	  DAO related beans:
	*********************************************************************************
	-->

	<!-- the dao registry -->
	<bean id="daoRegistry"
	   class="ch.elca.el4j.services.persistence.generic.dao.impl.FallbackDaoRegistry">
		
		<property name="daoPrototypeBeanName">
		    <idref bean="daoPrototype"/>
		</property>
		
		<!--  old-style config (to show how to mix old and new config ways, the other daos
		       are automatically loaded) -->
	       <property name="daos">
            <map>
                <entry key="ch.elca.el4j.seam.demo.entities.Employee">
                    <ref bean="employeeDao"/>
                </entry>
            </map>
        </property>
			
	</bean>

	<!-- DAO prototype to be used for DAO auto-creation  -->
	<bean id="daoPrototype" class="ch.elca.el4j.services.persistence.hibernate.dao.GenericHibernateDao"
		parent="abstractDao" scope="prototype">
		<property name="persistentClass" value="java.lang.Object"/>				
	</bean>
	
	<!-- Employee DAO for EmployeeManager  -->
	<bean id="employeeDao" class="ch.elca.el4j.services.persistence.hibernate.dao.GenericHibernateDao"
		parent="abstractDao" scope="prototype">
		<property name="persistentClass" value="ch.elca.el4j.seam.demo.entities.Employee"/>				
	</bean>
	
	<!--
	*********************************************************************************
	  Generic master/detail view beans:
	*********************************************************************************
	-->
	
	<!-- Shortname mapping: bijective mapping between entity shortnames and class names -->
	<bean id="shortNameMapping" class="ch.elca.el4j.seam.generic.EntityShortNameMapping">
		<property name="entityShortNames">
			<map>
				<entry key="ch.elca.el4j.apps.keyword.dom.Keyword">
					<value>keyword</value>
				</entry>
			</map>
		</property>
		<!-- The package to use when guessing -->
		<property name="defaultEntityPackage" value="ch.elca.el4j.seam.demo.entities"/>
	</bean>
	
	<!-- Entity info base: provides (mostly metadata related) info about entities -->
	<bean id="entityInfoBase" class="ch.elca.el4j.seam.generic.metadata.EntityInfoBase">
		<property name="sessionFactory" ref="hibernateSessionFactory"/>
	</bean>

	<!-- Field lists: computes field/column lists (metadata & given in/exclusion lists) -->
	<bean id="fieldLists" class="ch.elca.el4j.seam.generic.metadata.FieldLists">
		<property name="sessionFactory" ref="hibernateSessionFactory"/>
		<property name="shortNameMapping" ref="shortNameMapping"/>
	</bean>
	
	<!-- The essential utils bean: The heart of all generic master/detail views -->
	<bean id="utils" class="ch.elca.el4j.seam.generic.ElUtils">
		<property name="shortNameMapping" ref="shortNameMapping"/>
		<property name="entityInfoBase" ref="entityInfoBase"/>
		<property name="fieldLists" ref="fieldLists"/>
	</bean>
</beans>
