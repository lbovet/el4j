<?xml version="1.0" encoding="UTF-8"?>
<web-app>   
      
    <!-- Ajax4jsf filter not needed, Seam Filter installs it for us -->
    
    <context-param>     
      <param-name>org.ajax4jsf.VIEW_HANDLERS</param-name>     
      <param-value>com.sun.facelets.FaceletViewHandler</param-value>   
    </context-param>        
	
	<context-param>
        <param-name>org.ajax4jsf.SKIN</param-name>
        <param-value>blueSky</param-value>
    </context-param>
    
   
    
    <!-- Seam -->
         
    <listener>              
      <listener-class>org.jboss.seam.servlet.SeamListener</listener-class>        
    </listener>    

    <filter>
      <filter-name>Seam Filter</filter-name>
      <filter-class>org.jboss.seam.servlet.SeamFilter</filter-class>
    </filter>

    <filter-mapping>
      <filter-name>Seam Filter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>
	
    <servlet>
      <servlet-name>Seam Resource Servlet</servlet-name>
      <servlet-class>org.jboss.seam.servlet.ResourceServlet</servlet-class>
    </servlet>
    
    <servlet-mapping>
      <servlet-name>Seam Resource Servlet</servlet-name>
      <url-pattern>/seam/resource/*</url-pattern>
    </servlet-mapping>

	<!-- Open Session In View Filter (avoids hibernate LazyInitializationException) -->

	<filter>
      <filter-name>OpenSessionInViewFilter</filter-name>
      <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
	  <!-- <init-param>
		<param-name>singleSession</param-name>
		<param-value>false</param-value>
	  </init-param> -->
    </filter>

    <filter-mapping>
      <filter-name>OpenSessionInViewFilter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>  
    

    <!-- Faces Servlet -->
    
    <servlet>              
      <servlet-name>Faces Servlet</servlet-name>              
      <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>              
      <load-on-startup>1</load-on-startup>        
    </servlet>
    
    <servlet-mapping>              
      <servlet-name>Faces Servlet</servlet-name>              
      <url-pattern>*.seam</url-pattern>        
    </servlet-mapping>
	
	<!-- we do not use sun's implementation of the unified el from el-ri.jar
	     but rather the jboss-el from jboss-el.jar -->
	<context-param>
		<param-name>com.sun.faces.expressionFactory</param-name>
		<param-value>org.jboss.el.ExpressionFactoryImpl</param-value>
	</context-param>
    
    <!-- JSF parameters -->
    
    <context-param>        
      <param-name>javax.faces.DEFAULT_SUFFIX</param-name>        
      <param-value>.xhtml</param-value>    
    </context-param>
    
    <context-param>        
      <param-name>facelets.DEVELOPMENT</param-name>        
      <param-value>true</param-value>    
    </context-param>
	
	<context-param>        
      <param-name>facelets.REFRESH_PERIOD</param-name>        
      <param-value>1</param-value>    
    </context-param>
	
	
	<!-- Custom Facelet Tag libraries -->
	<context-param>
		<param-name>facelets.LIBRARIES</param-name>
		<param-value>/WEB-INF/taglib/datatable.taglib.xml;/WEB-INF/facelet/el4jtags.taglib.xml;</param-value>
	</context-param>
    
    <session-config>
        <session-timeout>10</session-timeout> 
    </session-config>
	
	<!--  Spring Configuration -->
   <context-param>
        <description>
            Configuration for the EL4J Application Context
        </description>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath*:mandatory/*.xml,
            classpath*:mandatory/generic/*.xml,
            classpath*:scenarios/db/raw/*.xml,
            classpath*:scenarios/dataaccess/hibernate/*.xml,
            classpath*:optional/interception/transactionJava5Annotations.xml
        </param-value>
    </context-param>
    
    <context-param>
        <description>
            Configuration locations to exclude from the application context.
        </description>
        <param-name>exclusiveLocations</param-name>
        <param-value>
            classpath*:mandatory/keyword/keyword-core-config.xml
        </param-value>
    </context-param>
    
    <context-param>
        <description>
            Bean definition overriding allowed in the application context?
        </description>
        <param-name>overrideBeanDefinitions</param-name>
        <param-value>
            true
        </param-value>
    </context-param>
    
    <listener>
        <listener-class>
            ch.elca.el4j.web.context.ModuleContextLoaderListener
        </listener-class>
    </listener>
    
</web-app>
