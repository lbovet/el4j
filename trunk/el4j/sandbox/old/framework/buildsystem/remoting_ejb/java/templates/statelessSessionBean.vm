package ${interfacePckg}.ejb;

import java.lang.reflect.InvocationTargetException;
#if ($contextPassing)
import java.util.Map;
import java.util.Collections;
#end

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.ejb.CreateException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import ch.elca.el4j.services.remoting.protocol.ejb.AbstractPojoWrapper;
import ch.elca.el4j.services.remoting.protocol.ejb.EjbServiceExporter;
import ch.elca.el4j.services.remoting.protocol.ejb.exception.WrapperException;

import ${interfacePckg}.*;

$XDoclet
public abstract class $EJBServiceName extends AbstractPojoWrapper
                                        implements javax.ejb.SessionBean {

    /**
     * This is the s_logger for this class.
     */
    private static Log s_logger = LogFactory.getLog(${EJBServiceName}.class);
    
#foreach ($method in $methods)
$method.getXDocletTags()
    $method {

        EjbServiceExporter ejbExporter = getServiceExporter();

        Class[] argTypes = new Class[] {$method.getArgTypesAsList()};
        Object[] args = new Object[] {$method.getArgsAsList()};

    try {
    #if ($method.returnTypeIsVoid())
            ejbExporter.invoke("$method.getName()", argTypes, args);
    #else
        return (($method.getCastType()) 
            ejbExporter.invoke("$method.getName()", argTypes, args))$method.getPrimitiveValue();
    #end
       } catch (InvocationTargetException ite) {
    	Throwable target = ite.getTargetException();
#if ($method.isWrapRTExceptions())
    	if (target instanceof RuntimeException) {
    	    throw new WrapperException(target);
    	} else
#end
#foreach ($exception in $method.getExceptions())
        if (target instanceof $exception) {
            throw ($exception) target;
        } else
#end
    	{
    		throw new RuntimeException(target);
    	}
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    }
    
#end

#if ($configurationObject.getSessionContext())
    private SessionContext m_sessionContext;

	/**
	 * @ejb.create-method
	 */
    public void ejbCreate() throws CreateException {
        EjbServiceExporter ejbExporter = getServiceExporter();
        
        try {
        invoke("$configurationObject.getSessionContext()",
            new Class[] {javax.ejb.SessionContext.class},
                new Object[] {m_sessionContext}, ejbExporter);
		} catch (RuntimeException rte) {
		    throw rte;
		} catch (Exception e) {
		    throw new CreateException(e.getMessage);
        }
    }
    
    public void setSessionContext(SessionContext ctx) {
        this.m_sessionContext = ctx;
    }
#end

#if ($configurationObject.getRemove())
    public void ejbRemove() {
        EjbServiceExporter ejbExporter = getServiceExporter();
        try {
            invoke("$configurationObject.getRemove()", ejbExporter);
        } catch (Exception e) {
            throw new EJBException(e);
        }
    }
#end
    
    private Object invoke(String method, Class[] paramTypes,
            Object[] params, EjbServiceExporter ejbExporter) throws Exception {
            
#if ($contextPassing)
            int len = 0;
            if (paramTypes != null) {
                len = paramTypes.length;
            }
            Class[] l_paramTypes = new Class[len + 1];
            Object[] l_params = new Object[len + 1];
            
            for (int i=0; i<len; i++) {
                l_paramTypes[i] = paramTypes[i];
                l_params[i] = params[i];
            }
            l_paramTypes[len] = java.util.Map.class;
            l_params[len] = Collections.EMPTY_MAP;
            
            paramTypes = l_paramTypes;
            params = l_params;
#end
			
            return ejbExporter.invoke(method, paramTypes, params);
    }
    
    private Object invoke(String method, EjbServiceExporter ejbExporter) throws Exception {
        return invoke(method, (Class[]) null, (Object[]) null,
            ejbExporter);
    }
    
    private EjbServiceExporter getServiceExporter() {
        return (EjbServiceExporter) AbstractPojoWrapper.
                getBean(new String[] {$inclusiveLocations}, 
                        new String[] {$exclusiveLocations},
                        "$exporterBeanName");
    }
}