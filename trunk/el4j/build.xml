<?xml version="1.0"?>
<project name="el4j" basedir="." default="create.zips">
    
    <!-- Version: $Revision$ -->
    <!-- URL: $URL$ -->
    <!-- Date: $Date$ -->
    <!-- Author: $Author$ -->

    <description>
        Build file to generate zips for SourceForge.
    </description>

    <!-- Imports the build properties -->
    <property file="build.properties"/>

    
    
    <!-- Target to create all zips -->
    <target name="create.zips" description="Global target to create all zips.">
        <antcall target="create.zip.essential"/>
        <antcall target="create.zip.convenience"/>
    </target>
    
    <!-- Target to create the essential zip -->
    <target name="create.zip.essential" 
        description="Generate zip file with essential EL4J stuff.">
        
        <property name="builder.zip.file.path" 
            value="${builder.zip.path}/${builder.zip.name.essential}"/>
        <delete quiet="true" file="${builder.zip.file.path}"/>
        <mkdir dir="${builder.zip.path}"/>
        
        <antcall target="internal.create.zip.essential"/>
    </target>
    
    <!-- Target to create the convenience zip -->
    <target name="create.zip.convenience" 
        description="Generate zip file with most EL4J stuff and the EL4J framework and helloworld.">
        
        <property name="builder.zip.file.path" 
            value="${builder.zip.path}/${builder.zip.name.convenience}"/>
        <delete quiet="true" file="${builder.zip.file.path}"/>
        <mkdir dir="${builder.zip.path}"/>
        
        <antcall target="internal.create.zip.convenience"/>
    </target>
    
    <!-- Internal target to create the essential zip -->
    <target name="internal.create.zip.essential"
        depends="collect.essential">
        <zip destfile="${builder.zip.file.path}"
            update="false"
            duplicate="fail">
            
            <zipfileset dir="${basedir}" prefix="${builder.zip.name.prefix}"
                excludes="${builder.general.excludes}">
                <include name="*.txt"/>
                <include name="etc/**"/>
                
                <include name="external-tools/el4ant/**/README.txt"/>
                <include name="external-tools/el4ant/**/ant-contrib-*.jar"/>
                <include name="external-tools/el4ant/**/buildsystem-*.jar"/>
                <include name="external-tools/el4ant/**/reports-*.jar"/>
                <include name="external-tools/el4ant/**/tools-*.jar"/>
                
                <include name="external-tools/ant/**"/>
                <exclude name="external-tools/ant/docs/**"/>
                
                <include name="${builder.library.path}/**"/>
                <exclude name="${builder.library.path.excludes}"/>
                
                <include name="${builder.modules.path}/**"/>
            </zipfileset>
        </zip>    
    </target>

    <!-- Internal target to create the convenience zip -->
    <target name="internal.create.zip.convenience"
        depends="collect.convenience">
        <antcall target="internal.create.zip.essential"/>
        
        <zip destfile="${builder.zip.file.path}"
            update="true"
            duplicate="fail">
            
            <zipfileset dir="${basedir}" prefix="${builder.zip.name.prefix}"
                excludes="${builder.general.excludes}">
                <include name="framework/**"/>
                <exclude name="framework/dist/**"/>
                <exclude name="framework/lib/**"/>
                <exclude name="framework/workspace/.metadata/**"/>
                <exclude name="framework/build.xml"/>

                <include name="helloworld/**"/>
                <exclude name="helloworld/dist/**"/>
                <exclude name="helloworld/lib/**"/>
                <exclude name="helloworld/workspace/.metadata/**"/>
                <exclude name="helloworld/build.xml"/>
            </zipfileset>
            <zipfileset dir="${basedir}/dist"
                prefix="${builder.zip.name.prefix}"
                excludes="${builder.general.excludes}">
                <include name="docs/**"/>
            </zipfileset>
        </zip>
    </target>
    
    
    <!-- Global target to clean -->
    <target name="clean" description="Cleans dirs that are used to create zips.">
        <antcall target="distclean"/>
        <antcall target="libclean"/>
        <antcall target="moduleclean"/>
    </target>
    
    <!-- Target to clean the dist dir -->
    <target name="distclean" description="Clean the dist directory.">
        <delete quiet="true" includeEmptyDirs="true">
            <fileset dir="${builder.dist.path}"/>
        </delete>
    </target>
    
    <!-- Target to clean the lib dir -->
    <target name="libclean" description="Clean the lib directory.">
        <delete quiet="true">
            <fileset dir="${builder.library.path}"
                includes="${builder.collect.libraries.includes}"/>
        </delete>
    </target>
    
    <!-- Target to clean the modules dir -->
    <target name="moduleclean" description="Clean the modules directory.">
        <delete quiet="true">
            <fileset dir="${builder.modules.path}"
                includes="${builder.collect.binary.modules.includes}"/>
        </delete>
    </target>
    


    <!--
        Reconfigures project given in property "builder.current.project".
        This task will be executed only once per project.
    --> 
    <target name="reconfigure.project"
        unless="reconfigured.${builder.current.project}">
        
        <!-- Can not execute distclean because the build.xml could not exist! -->
        <!--ant dir="${builder.current.project}" antfile="bootstrap.xml" 
            target="distclean"/-->
        <delete quiet="true" includeemptydirs="true">
            <fileset dir="${builder.current.project}">
                <include name="dist/**/*"/>
                <include name="lib/**/*"/>
                <include name="build.xml"/>
            </fileset>
        </delete>
        <ant dir="${builder.current.project}" antfile="bootstrap.xml" 
            target="configure"/>
        
        <property name="reconfigured.${builder.current.project}" value="true"/>
    </target>
    
    
    <!--
        Targets to collect parts for the zip file.
    -->
    <!-- Will be executed only once. -->
    <target name="collect.essential"
        unless="collect.essential.executed"
        description="Collects the needed for the essential zip.">
        
        <antcall target="collect.libraries.project">
            <param name="builder.current.project" value="framework"/>
        </antcall>
        <antcall target="collect.binary.modules.project">
            <param name="builder.current.project" value="framework"/>
        </antcall>
        <antcall target="collect.libraries.project">
            <param name="builder.current.project" value="helloworld"/>
        </antcall>
        <property name="collect.essential.executed" value="true"/>
    </target>
    
    <!-- Will be executed only once. -->
    <target name="collect.convenience"
        unless="collect.convenience.executed"
        description="Collects the needed for the convenience zip.">
        
        <antcall target="collect.javadoc.project">
            <param name="builder.current.project" value="framework"/>
        </antcall>
        <antcall target="collect.pdf.project">
            <param name="builder.current.project" value="framework"/>
        </antcall>
        
        <property name="collect.convenience.executed" value="true"/>
    </target>

    
    <target name="collect.libraries.project" depends="reconfigure.project">
        <copy todir="${builder.library.path}" overwrite="true">
            <fileset dir="${builder.current.project}/${builder.library.path.project}" 
                includes="${builder.collect.libraries.includes}"/>
        </copy>
    </target>
    
    <target name="collect.binary.modules.project" depends="reconfigure.project">
        <ant dir="${builder.current.project}" target="binrelease"/>
        <copy todir="${builder.modules.path}" overwrite="true">
            <fileset dir="${builder.current.project}/${builder.modules.path.project}"
                includes="${builder.collect.binary.modules.includes}"/>
        </copy>
    </target>
    
    <target name="collect.javadoc.project" depends="reconfigure.project">
        <ant dir="${builder.current.project}" target="javadoc"/>
        <delete quiet="true" includeEmptyDirs="true">
            <fileset dir="${builder.docs.path.javadoc}"/>
        </delete>
        <mkdir dir="${builder.docs.path.javadoc}"/>
        <copy todir="${builder.docs.path.javadoc}">
            <fileset dir="${builder.current.project}/${builder.javadoc.path.project}" includes="**/*"/>
        </copy>
    </target>
    
    <target name="collect.pdf.project">
        <delete quiet="true" includeEmptyDirs="true">
            <fileset dir="${builder.docs.path.pdf}"/>
        </delete>
        <mkdir dir="${builder.docs.path.pdf}"/>
        <copy todir="${builder.docs.path.pdf}">
            <fileset dir="${builder.current.project}/${builder.pdf.path.project}" includes="**/*"/>
        </copy>
    </target>
</project>
