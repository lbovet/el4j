package ${interfacePckg}.ejb;

import java.io.Serializable;
#if ($contextPassing)
import java.util.Map;
import java.util.Collections;
#end
import java.rmi.RemoteException;
import java.lang.reflect.InvocationTargetException;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
#if ($configurationObject.implementsSessionSynchronization())
import javax.ejb.SessionSynchronization;
import javax.ejb.EJBException;
#end
import javax.ejb.CreateException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import ch.elca.el4j.services.remoting.protocol.ejb.AbstractPojoWrapper;
import ch.elca.el4j.services.remoting.protocol.ejb.EjbServiceExporter;
import ch.elca.el4j.services.remoting.protocol.ejb.exception.WrapperException;

import ${interfacePckg}.*;

$XDoclet
public abstract class $EJBServiceName extends AbstractPojoWrapper
    implements SessionBean, Serializable 
    #if ($configurationObject.implementsSessionSynchronization())
        , SessionSynchronization
    #end
    {
                                                   
    /**
     * This is the s_logger for this class.
     */
    private static Log s_logger = LogFactory.getLog(${EJBServiceName}.class);                                               
                                        
    /**
     * This is the the ejbExporter containing the Spring bean.
     */
    private EjbServiceExporter m_ejbExporter;

#if ($configurationObject.getSessionContext())
    private SessionContext m_sessionContext;
#end

#foreach ($method in $methods)
$method.getXDocletTags()
    $method {
        Class[] argTypes = new Class[] {$method.getArgTypesAsList()};
        Object[] args = new Object[] {$method.getArgsAsList()};
    try {
#if ($method.returnTypeIsVoid())
        m_ejbExporter.invoke("$method.getName()", argTypes, args);
#else
        return (($method.getCastType()) 
            m_ejbExporter.invoke("$method.getName()", argTypes, args))$method.getPrimitiveValue();
#end
    } catch (InvocationTargetException ite) {
    	Throwable target = ite.getTargetException();
#if ($method.isWrapRTExceptions())
    	if (target instanceof RuntimeException) {
    	    throw new WrapperException(target);
    	} else
#end
#foreach ($exception in $method.getExceptions())
        if (target instanceof $exception) {
            throw ($exception) target;
        } else
#end
    	{
    		throw new RuntimeException(target);
    	}
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    }
    
    
#end

#if ($configurationObject.getCreate())
	/**
	 * @ejb.create-method
	 */
	public void ejbCreate(Object[] objs) throws CreateException {
		s_logger.info("create(Object[]) called on home interface");
		
		try {
            initServiceExporter();
#if ($configurationObject.getSessionContext())
            initSessionContext();
#end
            invoke("$configurationObject.getCreate()",
                new Class[] {java.lang.Object[].class}, new Object[] {objs});
        } catch (RemoteException re) {
            throw new CreateException(re.getMessage());
        }
	}
#end
	
	/**
	 * @ejb.create-method
	 */
    public void ejbCreate() throws CreateException {
        try {
            s_logger.info("create() called on home interface");
            initServiceExporter();
#if ($configurationObject.getSessionContext())
            initSessionContext();
#end
        } catch (RemoteException re) {
            throw new CreateException(re.getMessage());
        }
    }

    public void ejbActivate() throws EJBException, RemoteException {
#if ($configurationObject.getActivate())
        invoke("$configurationObject.getActivate()");
#end
    }
    
#if ($configurationObject.getPassivate())
    public void ejbPassivate() throws EJBException, RemoteException {
    	invoke("$configurationObject.getPassivate()");
    }
#end

#if ($configurationObject.getRemove())
    public void ejbRemove() throws EJBException, RemoteException {
    	invoke("$configurationObject.getRemove()");
    }
#end

#if ($configurationObject.getSessionContext())
    public void setSessionContext(SessionContext ctx) throws EJBException, RemoteException {
        this.m_sessionContext = ctx;
    }
#end

#if ($configurationObject.implementsSessionSynchronization())
    public void afterBegin() throws EJBException, RemoteException {
        #if ($configurationObject.getAfterBegin())
        invoke("$configurationObject.getAfterBegin()");
        #end
    }

    public void beforeCompletion() throws EJBException, RemoteException {
#if ($configurationObject.getBeforeCompletion())
        invoke("$configurationObject.getBeforeCompletion()");
#end
    }

    public void afterCompletion(boolean commited) throws EJBException, RemoteException {
#if ($configurationObject.getAfterCompletion())
        invoke("$configurationObject.getAfterCompletion()",
            new Class[] {boolean.class}, new Object[] {new Boolean(commited)});
#end
    }
#end

    private Object invoke(String method, Class[] paramTypes, Object[] params) throws EJBException {
        try {
#if ($contextPassing)
            int len = 0;
            if (paramTypes != null) {
                len = paramTypes.length;
            }
            Class[] l_paramTypes = new Class[len + 1];
            Object[] l_params = new Object[len + 1];
            
            for (int i=0; i<len; i++) {
                l_paramTypes[i] = paramTypes[i];
                l_params[i] = params[i];
            }
            l_paramTypes[len] = java.util.Map.class;
            l_params[len] = Collections.EMPTY_MAP;
            
            paramTypes = l_paramTypes;
            params = l_params;
#end
			
            return m_ejbExporter.invoke(method, paramTypes, params);
        } catch (Exception e) {
            s_logger.error("Error while executing '" + method + "'.", e);
            throw new EJBException("Exception while invoking '" + method + "'.", e);
        }
    }
    
    private Object invoke(String method) throws EJBException {
        return invoke(method, (Class[]) null, (Object[]) null);
    }
    
    private void initServiceExporter() {
        m_ejbExporter = (EjbServiceExporter) AbstractPojoWrapper.
                getBean(new String[] {$inclusiveLocations}, 
                        new String[] {$exclusiveLocations},
                        "$exporterBeanName");
    }
    
#if ($configurationObject.getSessionContext())
    private void initSessionContext() throws RemoteException {
    	invoke("$configurationObject.getSessionContext()",
            new Class[] {javax.ejb.SessionContext.class}, new Object[] {m_sessionContext});
    }
#end
}