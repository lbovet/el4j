Index: src/org/jdesktop/beansbinding/BeanProperty.java
===================================================================
--- src/org/jdesktop/beansbinding/BeanProperty.java	(revision 623)
+++ src/org/jdesktop/beansbinding/BeanProperty.java	(working copy)
@@ -15,6 +15,12 @@
  *
  *   - Do testing with applets/security managers.
  *
+ *   - Introspector/reflection doesn't work for non-public classes. EL handles this
+ *     by trying to find a version of the method in a public superclass/interface.
+ *     Looking at the code for Introspector (also used by EL), I got the idea that
+ *     it already does something like this. Investigate why EL handles this in an
+ *     extra step, and decide what we need to do in this class.
+ *
  *   - Add option to turn on validation. For now it's hard-coded to be off.
  */
 
@@ -23,7 +29,6 @@
 import java.beans.*;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
 import java.util.*;
 import org.jdesktop.observablecollections.ObservableMap;
 import org.jdesktop.observablecollections.ObservableMapListener;
@@ -719,6 +724,15 @@
     public String toString() {
         return getClass().getName() + "[" + path + "]";
     }
+    
+    /**
+     * @return   the name of the property
+     * 
+     * @author SWI
+     */
+    public String getPropertyName() {
+        return path.toString();
+    }
 
     /**
      * @throws PropertyResolutionException
@@ -735,56 +749,6 @@
     }
 
     /**
-     * Returns a public form of the given method for the given class.
-     * <p>
-     * If a {@code PropertyDescriptor} is obtained for a non-public class that
-     * implements a public interface, the read/write methods will be for the
-     * class, and therefore inaccessible. To correct this, a version of the
-     * same method must be found in a superclass or interface.
-     *
-     * @param cl the class on which to search for the method
-     * @param method the method
-     * @return a public form of the given method for the given class,
-     *         or {@code null} if one can't be found
-     */
-    static private Method getPublicForm(Class cl, Method method) {
-        if (method == null) {
-            return null;
-        }
-
-        if (Modifier.isPublic(cl.getModifiers())) {
-            return method;
-        }
-
-        for (Class c : cl.getInterfaces()) {
-            Method m = null;
-            try {
-                m = c.getMethod(method.getName(), method.getParameterTypes());
-                c = m.getDeclaringClass();
-                if ((m = getPublicForm(c, m)) != null) {
-                    return m;
-                }
-            } catch (NoSuchMethodException ex) {
-            }
-        }
-
-        Class c = cl.getSuperclass();
-        if (c != null) {
-            Method m = null;
-            try {
-                m = c.getMethod(method.getName(), method.getParameterTypes());
-                c = m.getDeclaringClass();
-                if ((m = getPublicForm(c, m)) != null) {
-                    return m;
-                }
-            } catch (NoSuchMethodException ex) {
-            }
-        }
-
-        return null;
-    }
-
-    /**
      * @throws PropertyResolutionException
      */
     private static PropertyDescriptor getPropertyDescriptor(Object object, String string) {
@@ -846,7 +810,8 @@
         object = getAdapter(object, string);
 
         PropertyDescriptor pd = getPropertyDescriptor(object, string);
-        return pd == null ? null : getPublicForm(object.getClass(), pd.getReadMethod());
+        Method readMethod = null;
+        return pd == null ? null : pd.getReadMethod();
     }
 
     /**
@@ -896,7 +861,7 @@
         object = getAdapter(object, string);
         
         PropertyDescriptor pd = getPropertyDescriptor(object, string);
-        if (pd == null || getPublicForm(object.getClass(), pd.getWriteMethod()) == null) {
+        if (pd == null || pd.getWriteMethod() == null) {
             log("getType()", "missing write method");
             throw new UnsupportedOperationException("Unwritable");
         }
@@ -914,7 +879,8 @@
         object = getAdapter(object, string);
 
         PropertyDescriptor pd = getPropertyDescriptor(object, string);
-        return pd == null ? null : getPublicForm(object.getClass(), pd.getWriteMethod());
+        Method writeMethod = null;
+        return pd == null ? null : pd.getWriteMethod();
     }
 
     /**
@@ -990,7 +956,7 @@
         EventSetDescriptor ed = getEventSetDescriptor(object);
         Method addPCMethod = null;
 
-        if (ed == null || (addPCMethod = getPublicForm(object.getClass(), ed.getAddListenerMethod())) == null) {
+        if (ed == null || (addPCMethod = ed.getAddListenerMethod()) == null) {
             log("addPropertyChangeListener()", "can't add listener");
             return;
         }
@@ -1005,7 +971,7 @@
         EventSetDescriptor ed = getEventSetDescriptor(object);
         Method removePCMethod = null;
 
-        if (ed == null || (removePCMethod = getPublicForm(object.getClass(), ed.getRemoveListenerMethod())) == null) {
+        if (ed == null || (removePCMethod = ed.getRemoveListenerMethod()) == null) {
             log("removePropertyChangeListener()", "can't remove listener from source");
             return;
         }
Index: src/org/jdesktop/el/BeanELResolver.java
===================================================================
--- src/org/jdesktop/el/BeanELResolver.java	(revision 623)
+++ src/org/jdesktop/el/BeanELResolver.java	(working copy)
@@ -489,10 +489,7 @@
      **/
 
     static private Method getMethod(Class cl, Method method) {
-        if (method == null) {
-            return null;
-        }
-        
+
         if (Modifier.isPublic (cl.getModifiers ())) {
             return method;
         }
Index: src/org/jdesktop/el/impl/ValueExpressionImpl.java
===================================================================
--- src/org/jdesktop/el/impl/ValueExpressionImpl.java	(revision 623)
+++ src/org/jdesktop/el/impl/ValueExpressionImpl.java	(working copy)
@@ -195,11 +195,8 @@
         if (value == ELContext.UNRESOLVABLE_RESULT) {
             return new Result(Result.Type.UNRESOLVABLE, null, resolvedProperties);
         }
-
-        if (this.expectedType != null) {
-            value = ELSupport.coerceToType(value, this.expectedType);
-        }
-
+        
+        value = ELSupport.coerceToType(value, this.expectedType);
         return new Result(Result.Type.VALUE, value, resolvedProperties);
     }
     
Index: src/org/jdesktop/swingbinding/impl/ListBindingManager.java
===================================================================
--- src/org/jdesktop/swingbinding/impl/ListBindingManager.java	(revision 623)
+++ src/org/jdesktop/swingbinding/impl/ListBindingManager.java	(working copy)
@@ -7,6 +7,9 @@
 
 import org.jdesktop.observablecollections.ObservableList;
 import org.jdesktop.observablecollections.ObservableListListener;
+import org.jdesktop.swingbinding.validation.ValidationCapability;
+import org.jdesktop.swingbinding.validation.ValidatedProperty;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -102,7 +105,36 @@
 
         reusableBinding.setBaseAndSource(bindings[column], elements.get(row));
         Binding.ValueResult result = reusableBinding.getSourceValueForTarget();
-        return result.failed() ? null : result.getValue();
+        
+        // added by SWI {
+        if (result.failed()) {
+            return null;
+        }
+        
+        // get property name and check validity
+        String propertyName = null;
+        // no validation -> property is valid
+        boolean valid = true;
+        
+        Property property = reusableBinding.getSourceProperty();
+        if (property instanceof BeanProperty) {
+            BeanProperty beanProperty = (BeanProperty) property;
+            propertyName = beanProperty.getPropertyName();
+        }
+        
+        if (reusableBinding.getSourceObject() instanceof ValidationCapability) {
+            org.jdesktop.swingbinding.validation.ValidationCapability v = (ValidationCapability) reusableBinding.getSourceObject();
+            if (propertyName != null) {
+                valid = v.isValid(propertyName);
+            } else {
+                valid = v.isValid();
+            }
+        }
+        return new ValidatedProperty(reusableBinding.getSourceObject(),
+                reusableBinding.getSourceValueForTarget().getValue(), propertyName, valid);
+        
+        //return result.failed() ? null : result.getValue();
+        // } added by SWI
     }
 
     public final int columnCount() {
Index: src/org/jdesktop/swingbinding/JTableBinding.java
===================================================================
--- src/org/jdesktop/swingbinding/JTableBinding.java	(revision 623)
+++ src/org/jdesktop/swingbinding/JTableBinding.java	(working copy)
@@ -18,6 +18,8 @@
 import org.jdesktop.beansbinding.PropertyStateListener;
 import org.jdesktop.swingbinding.impl.AbstractColumnBinding;
 import org.jdesktop.swingbinding.impl.ListBindingManager;
+import org.jdesktop.swingbinding.validation.ValidatedProperty;
+
 import static org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.*;
 
 /**
@@ -599,7 +601,10 @@
          * @see javax.swing.table.TableModel#getColumnClass
          */
         public Class<?> getColumnClass() {
-            return columnClass == null ? Object.class : columnClass;
+            // added by SWI {
+            return ValidatedProperty.class;
+            //return columnClass == null ? Object.class : columnClass;
+            // } added by SWI
         }
 
         /**
Index: src/org/jdesktop/swingbinding/validation/ValidatedProperty.java
===================================================================
--- src/org/jdesktop/swingbinding/validation/ValidatedProperty.java	(revision 0)
+++ src/org/jdesktop/swingbinding/validation/ValidatedProperty.java	(revision 0)
@@ -0,0 +1,67 @@
+package org.jdesktop.swingbinding.validation;
+
+public class ValidatedProperty implements Comparable<ValidatedProperty> {
+    private Object value;
+    private Object parent;
+    private String property;
+    private boolean valid;
+    
+    public ValidatedProperty(String value) {
+        // this constructor is necessary for
+        // table.getDefaultEditor(...).getTableCellEditorComponent(...)
+    }
+    
+    public ValidatedProperty(Object parent, Object value, String property, boolean valid) {
+        this.value = value;
+        this.valid = valid;
+        this.parent = parent;
+        this.property = property;
+    }
+    
+    public Object getValue() {
+        return value;
+    }
+    
+    public void setValue(Object value) {
+        this.value = value;
+    }
+    
+    public boolean isValid() {
+        return valid;
+    }
+
+    public void setValid(boolean valid) {
+        this.valid = valid;
+    }
+
+    public Object getParent() {
+        return parent;
+    }
+
+    public void setParent(Object parent) {
+        this.parent = parent;
+    }
+
+    public String getProperty() {
+        return property;
+    }
+
+    public void setProperty(String property) {
+        this.property = property;
+    }
+    
+    @SuppressWarnings("unchecked")
+    public int compareTo(ValidatedProperty other) {
+        if (value instanceof Comparable) {
+            Comparable comparable = (Comparable) value;
+            return comparable.compareTo(other.getValue());
+        } else {
+            return 0;
+        }
+    }
+    
+    @Override
+    public String toString() {
+        return value.toString();
+    }
+}

Property changes on: src\org\jdesktop\swingbinding\validation\ValidatedProperty.java
___________________________________________________________________
Name: svn:keywords
   + URL Date Author Revision Id
Name: svn:eol-style
   + native

Index: src/org/jdesktop/swingbinding/validation/ValidationCapability.java
===================================================================
--- src/org/jdesktop/swingbinding/validation/ValidationCapability.java	(revision 0)
+++ src/org/jdesktop/swingbinding/validation/ValidationCapability.java	(revision 0)
@@ -0,0 +1,20 @@
+package org.jdesktop.swingbinding.validation;
+
+import org.jdesktop.beansbinding.Property;
+
+/**
+ * The interface to make a model validateable.
+ * 
+ * @author SWI
+ */
+public interface ValidationCapability {
+    /**
+     * @return      <code>true</code> if all properties have valid values
+     */
+    public boolean isValid();
+    
+    /**
+     * @return      <code>true</code> if property has a valid value
+     */
+    public boolean isValid(String property);
+}

Property changes on: src\org\jdesktop\swingbinding\validation\ValidationCapability.java
___________________________________________________________________
Name: svn:keywords
   + URL Date Author Revision Id
Name: svn:eol-style
   + native

Index: src/org/jdesktop/swingbinding/validation/ValidatedProperty.java
===================================================================
--- src/org/jdesktop/swingbinding/validation/ValidatedProperty.java	(revision 0)
+++ src/org/jdesktop/swingbinding/validation/ValidatedProperty.java	(revision 0)
@@ -0,0 +1,67 @@
+package org.jdesktop.swingbinding.validation;
+
+public class ValidatedProperty implements Comparable<ValidatedProperty> {
+    private Object value;
+    private Object parent;
+    private String property;
+    private boolean valid;
+    
+    public ValidatedProperty(String value) {
+        // this constructor is necessary for
+        // table.getDefaultEditor(...).getTableCellEditorComponent(...)
+    }
+    
+    public ValidatedProperty(Object parent, Object value, String property, boolean valid) {
+        this.value = value;
+        this.valid = valid;
+        this.parent = parent;
+        this.property = property;
+    }
+    
+    public Object getValue() {
+        return value;
+    }
+    
+    public void setValue(Object value) {
+        this.value = value;
+    }
+    
+    public boolean isValid() {
+        return valid;
+    }
+
+    public void setValid(boolean valid) {
+        this.valid = valid;
+    }
+
+    public Object getParent() {
+        return parent;
+    }
+
+    public void setParent(Object parent) {
+        this.parent = parent;
+    }
+
+    public String getProperty() {
+        return property;
+    }
+
+    public void setProperty(String property) {
+        this.property = property;
+    }
+    
+    @SuppressWarnings("unchecked")
+    public int compareTo(ValidatedProperty other) {
+        if (value instanceof Comparable) {
+            Comparable comparable = (Comparable) value;
+            return comparable.compareTo(other.getValue());
+        } else {
+            return 0;
+        }
+    }
+    
+    @Override
+    public String toString() {
+        return value.toString();
+    }
+}

Property changes on: src\org\jdesktop\swingbinding\validation\ValidatedProperty.java
___________________________________________________________________
Name: svn:keywords
   + URL Date Author Revision Id
Name: svn:eol-style
   + native

Index: src/org/jdesktop/swingbinding/validation/ValidationCapability.java
===================================================================
--- src/org/jdesktop/swingbinding/validation/ValidationCapability.java	(revision 0)
+++ src/org/jdesktop/swingbinding/validation/ValidationCapability.java	(revision 0)
@@ -0,0 +1,20 @@
+package org.jdesktop.swingbinding.validation;
+
+import org.jdesktop.beansbinding.Property;
+
+/**
+ * The interface to make a model validateable.
+ * 
+ * @author SWI
+ */
+public interface ValidationCapability {
+    /**
+     * @return      <code>true</code> if all properties have valid values
+     */
+    public boolean isValid();
+    
+    /**
+     * @return      <code>true</code> if property has a valid value
+     */
+    public boolean isValid(String property);
+}

Property changes on: src\org\jdesktop\swingbinding\validation\ValidationCapability.java
___________________________________________________________________
Name: svn:keywords
   + URL Date Author Revision Id
Name: svn:eol-style
   + native

