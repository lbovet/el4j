<FindBugsFilter>
	<!-- exclude bug warning for non-localized toLowerCase & toUpperCase in class string. --> 
	<Match>
		<Bug category = "I18N" />
	</Match>
	<!-- exclude bug warning that recommends inner classes to be static, as it also recommends this 
		for anonymous inner classes that are quite convenient as they are. -->
	<Match>
		<Bug code = "SIC" />
	</Match>
	<!-- excluded bug warning that recommends mutable static fields to be package protected to avoid
			beeing changed. This warning is often shown for fields related to spring. -->
	<Match>
		<Bug code = "MS" />
	</Match>
	
	<!-- excluded bug warning that complains if a class that implements serializable doesn't declear a 
			SerialVersionUID, as this isn't required in the EL4J framework -->
	<Match>
		<Bug code = "SnVI" />
	</Match>
	
	<!-- excludes an experimental bug warning that checks for possible loss of logger when using OpenJDK. -->
	<Match>
		<Bug code = "LG" />
	</Match>

	<!-- excludes bug warning that asks if a method should return an empty array rather then null,
		this warning always appears for the includeLocation and excludeLocation methods for the ModuleApplicationContext. -->
	<Match>
		<Bug code = "PZLA" />
	</Match>
	
	<!-- bugs that warn for possible exposure of internal representation by storing or an externably mutable object into a field or returning a reference to a internal mutable field. 
	For the moment these bugs are to prevalent, and one would need a new policy for handling them -->
	<Match>
		<Bug code = "EI" />
	</Match>
	
	<Match>
		<Bug code = "EI2" />
	</Match>	
</FindBugsFilter>