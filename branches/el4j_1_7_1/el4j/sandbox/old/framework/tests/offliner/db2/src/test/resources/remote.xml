<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<bean id="daoRegistry"
		class="ch.elca.el4j.services.persistence.generic.dao.impl.DefaultDaoRegistry">
		<property name="namePattern" value="*Dao" />
	</bean>

	<!-- Convenience Hibernate Session Factory Bean: it autocollects all @entity-annotated classes in
		the Java packages given under the property autoDetectEntityPackage -->	
	<bean id="sessionFactory" parent="abstractSessionFactory">

			<!-- the package that entity auto-detection will browse.	-->
		<property name="autoDetectEntityPackage">
			<value>ch.elca.el4j.tests.services.persistence.hibernate.offlining.dom</value>
		</property>
	
		<property name="annotatedClasses">
			<list>
				<!-- only add here entities that are not automatically discovered
					(ie, those that do not stand inside autoDetectEntityPackage)
					<value>ch.elca.el4j.dom.MyEntity</value>
				-->
			</list>
		</property>
		<property name="dataSource">
			<ref bean="dataSourceRemote"/>
		</property>
	</bean>

	<!-- A data source to keep the ModuleApplicationContext happy.
		This is never used. (Name dataSource must be taken, but we can't
		use it for our context or we get the wrong database injected. -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" />
		


	<!-- The DBCP DataSource -->
	<bean id="dataSourceRemote" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass">
			<value>org.apache.derby.jdbc.ClientDriver</value>
		</property>
		<property name="jdbcUrl">
			<value>jdbc:derby://localhost:1527/local;create=true</value>
		</property>
		<property name="user">
			<value>remote</value>
		</property>
		<property name="password">
			<value>pass</value>
		</property>

		
	</bean>

	<!-- The transactionmanager to use for regular non JTA datasource -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="dataSource">
			<ref local="dataSourceRemote"/>
		</property>
		<property name="sessionFactory">
			<ref bean="sessionFactory"/>
		</property>
	</bean>
	
	<bean id="abstractDao" abstract="true">
		<property name="sessionFactory">
			<ref bean="sessionFactory"/>
		</property>
	</bean>
	
	<bean id="mappingTable" class="ch.elca.el4j.services.persistence.hibernate.offlining.util.ServerMappingTable" />
	
	<bean id="mapped" class="ch.elca.el4j.services.persistence.hibernate.offlining.objectwrapper.impl.MemoryMappedImpl">
		<constructor-arg ref="mappingTable" />
	</bean>
	
	<bean id="offliningServer" class="ch.elca.el4j.services.persistence.hibernate.offlining.impl.OffliningServerImpl">
		<constructor-arg ref="daoRegistry" />
		<constructor-arg ref="mappingTable" />
		<constructor-arg ref="objectWrapper" />
		<constructor-arg ref="stateTable" />
	</bean>
	
	<!-- REMOTING -->
	
	<bean id="rmiProtocol" class="ch.elca.el4j.services.remoting.protocol.Rmi">
		<property name="serviceHost">
			<value>${rmi.host}</value>
		</property>
		<property name="servicePort">
			<value>${rmi.port}</value>
		</property>
		<!--
		<property name="implicitContextPassingRegistry">
			<ref local="rmiImplicitContextPassingRegistry" />
		</property>
		 -->
	</bean>

	<!--
	<bean id="rmiImplicitContextPassingRegistry"
		class="ch.elca.el4j.core.contextpassing.DefaultImplicitContextPassingRegistry" />
	 -->
		
	<bean id="rmiServer" class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
		<property name="remoteProtocol">
			<ref bean="rmiProtocol" />
		</property>
		<property name="serviceInterface">
			<value>ch.elca.el4j.services.persistence.hibernate.offlining.impl.OffliningServer</value>
		</property>
		<property name="serviceName">
			<value>Offlining.Server</value>
		</property>
		<property name="service">
			<idref bean="offliningServer"/>
		</property>
	</bean>
	
	<bean id="rmiPersonDao" class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
		<property name="remoteProtocol">
			<ref bean="rmiProtocol" />
		</property>
		<property name="serviceInterface">
			<value>ch.elca.el4j.services.persistence.hibernate.dao.ConvenienceGenericHibernateDao</value>
		</property>
		<property name="serviceName">
			<value>Offlining.PersonDao</value>
		</property>
		<property name="service">
			<idref bean="personDao"/>
		</property>
	</bean>
	
	<bean id="rmiSimplePersonDao" class="ch.elca.el4j.services.remoting.RemotingServiceExporter">
		<property name="remoteProtocol">
			<ref bean="rmiProtocol" />
		</property>
		<property name="serviceInterface">
			<value>ch.elca.el4j.services.persistence.hibernate.dao.ConvenienceGenericHibernateDao</value>
		</property>
		<property name="serviceName">
			<value>Offlining.SimplePersonDao</value>
		</property>
		<property name="service">
			<idref bean="simplePersonDao"/>
		</property>
	</bean>
	
</beans>
