<?xml version="1.0" encoding="UTF-8"?>
<!--
	Spring bean configuration file to prepare Hibernate SessionFactory. This
	bean is normally used in daos.
	
	Needed beans which are not defined in this file:
	* dataSource
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- $Revision$ -->
	<!-- $URL$ -->
	<!-- $Date$ -->
	<!-- $Author$ -->
	
	
	<!-- Convenience Hibernate Session Factory Bean: it autocollects all @entity-annotated classes in
		the Java packages given under the property autoDetectEntityPackage -->
	<bean id="sessionFactory" parent="abstractSessionFactory">
	
		<!-- the packages that our entity auto-detection will browse.	-->
		<property name="autoDetectEntityPackage">
			<list>
				<value>ch.elca.el4j.apps.keyword.dom</value>
				<value>ch.elca.el4j.apps.refdb.dom</value>
			</list>
		</property>
		
		<property name="annotatedClasses">
			<list>
				<!-- only add here entities that are not automatically discovered
					(ie, those that do not stand inside autoDetectEntityPackage)
					<value>ch.elca.el4j.dom.MyEntity</value>
				-->
			</list>
		</property>
		
		<!-- List of Hibernate mapping files (if XML mapping files are used) -->
		<property name="mappingResources">
			<list>
				<value>hibernate/Booking.hbm.xml</value>
				<value>hibernate/Genre.hbm.xml</value>
				<value>hibernate/Performance.hbm.xml</value>
				<value>hibernate/PriceBand.hbm.xml</value>
				<value>hibernate/PriceStructure.hbm.xml</value>
				<value>hibernate/Purchase.hbm.xml</value>
				<value>hibernate/Seat.hbm.xml</value>
				<value>hibernate/SeatClass.hbm.xml</value>
				<value>hibernate/SeatStatus.hbm.xml</value>
				<value>hibernate/SeatingPlan.hbm.xml</value>
				<value>hibernate/Show.hbm.xml</value>
				<value>hibernate/queries.hbm.xml</value>
			</list>
		</property>

		<!-- List of Hibernate properties -->
		<property name="hibernateProperties">
			<props merge="true">

				<!--
					Optional property representing the Hibernate cache provider. If this
					property is set, Hibernate's second-level cache will be used (the
					first-level cache, consisting of the Hibernate Session itself, is
					enabled automatically - it is a transaction scope cache). The Hibernate
					second-level cache has process or cluster scope; all sessions share the
					same second-level cache. The second-level cache actually has the scope of
					a SessionFactory. Hence the second-level cache can be dangerous in systems
					that share the database with other writing applications. Furthermore, the
					cache is usually useful only for readmostly classes. If you have data that
					is updated more often than it's read, don't enable the second-level cache,
					even if all other conditions for caching are true - in such situations,
					performance will degrade if you enable the second-level cache!
					
					In addition to setting the cache provider property in the configuration
					file, the concurrency strategy which will used for caching has to be set
					in the mapping files of each class which will make use of the second-level
					cache (this is done with the help of the cache attribute), and the provider-
					specific settings, such as the expiry policies for the cache regions have
					to be set. For the EHCache provider, this is done in the provider's
					configuration file called ehcache.xml.
					
					Uncomment the following line to enable the second-level cache.
				-->
				<!--   <prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>-->

				<!--  the  next two lines print more verbose info about hibernate >
				<prop key="hibernate.use_sql_comments">true</prop>
				<prop key="hibernate.show_sql">true</prop-->
				
			</props>
		</property>
	</bean>
	
</beans>
