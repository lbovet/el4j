<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- $Revision$ -->
	<!-- $URL$ -->
	<!-- $Date$ -->
	<!-- $Author$ -->
	
	<!--
		Trace interceptor added to test if metadata of implementation can be
		found altough the target bean is already a proxy.
	-->
	<bean id="methodTraceAutoProxy"
		class="ch.elca.el4j.core.aop.IntelligentExclusiveBeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<value>methodTraceInterceptor</value>
		</property>
		<property name="beanNames">
			<value>foo</value>
		</property>
	</bean>
	<bean id="methodTraceInterceptor"
		class="org.springframework.aop.interceptor.CustomizableTraceInterceptor">
		<property name="enterMessage">
			<value>Entering method $[targetClassShortName].$[methodName]($[arguments]) with types($[argumentTypes])</value>
		</property>
		<property name="exceptionMessage">
			<value>Exception thrown in method '$[methodName]' of class [$[targetClassName]]</value>
		</property>
		<property name="exitMessage">
			<value>Exiting method '$[methodName]' of class [$[targetClassName]]</value>
		</property>
		<property name="useDynamicLogger">
			<value>true</value>
		</property>
	</bean>
	

	
	<!--
		Define the autoproxy bean which looks for each advisor in this context.
	-->
	<bean id="genericMetaDataAutoproxy"
		class="ch.elca.el4j.core.aop.IntelligentAdvisorAutoProxyCreator">
		<property name="usePrefix" value="true"/>
	</bean>

	<!-- Define the first Advisor bean. -->
	<bean id="genericMetaDataAutoproxy.genericMetaDataAdvisorOne"
		class="ch.elca.el4j.util.metadata.GenericMetaDataAdvisor">
		<property name="methodInterceptor">
			<ref local="exampleInterceptorOne"/>
		</property>
		<property name="interceptingMetaData">
			<list>
				<value>ch.elca.el4j.tests.util.metadata.annotations.ExampleAnnotationOne</value>
			</list>
		</property>
		<property name="order">
			<value>1</value>
		</property>
	</bean>

	<!-- Define the second Advisor bean. -->
	<bean id="genericMetaDataAutoproxy.genericMetaDataAdvisorTwo"
		class="ch.elca.el4j.util.metadata.GenericMetaDataAdvisor">
		<property name="methodInterceptor">
			<ref local="exampleInterceptorTwo"/>
		</property>
		<property name="interceptingMetaData">
			<list>
				<value>ch.elca.el4j.tests.util.metadata.annotations.ExampleAnnotationTwo</value>
			</list>
		</property>
		<property name="order">
			<value>2</value>
		</property>
	</bean>
	
	<!-- Define the interceptor to be used by the first advisor. -->
	<bean id="exampleInterceptorOne"
		class="ch.elca.el4j.tests.util.metadata.annotations.ExampleInterceptor">
	</bean>

	<!-- Define the interceptor to be used by the second advisor. -->
	<bean id="exampleInterceptorTwo"
		class="ch.elca.el4j.tests.util.metadata.annotations.ExampleInterceptor">
	</bean>

	<!--
		Define the bean which owns a method that should be intercepted.
	-->
	<bean id="foo" class="ch.elca.el4j.tests.util.metadata.annotations.FooImpl"/>
</beans>