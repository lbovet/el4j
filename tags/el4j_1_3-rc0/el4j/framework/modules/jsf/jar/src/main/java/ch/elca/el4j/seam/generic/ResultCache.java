/*
 * EL4J, the Extension Library for the J2EE, adds incremental enhancements to
 * the spring framework, http://el4j.sf.net
 * Copyright (C) 2005 by ELCA Informatique SA, Av. de la Harpe 22-24,
 * 1000 Lausanne, Switzerland, http://www.elca.ch
 *
 * EL4J is published under the GNU Lesser General Public License (LGPL)
 * Version 2.1. See http://www.gnu.org/licenses/
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * For alternative licensing, please contact info@elca.ch
 */
package ch.elca.el4j.seam.generic;

import java.util.HashMap;

/**
 * A very simple "cache" implementation for storing results of expensive
 * computations.
 * CAUTION: This "cache" assumes that a value, once stored,
 * remains valid forever!
 * 
 * <script type="text/javascript">printFileStatus
 *   ("$URL$",
 *    "$Revision$",
 *    "$Date$",
 *    "$Author$"
 * );</script>
 *
 * @author Baeni Christoph (CBA)
 */
public class ResultCache {
    /**
     * The actual cache.
     */
    private HashMap<String, Object> m_cache = new HashMap<String, Object>();

    /**
     * @param parts    the key parts
     * @return         a key based on the parts
     */
    public String computeKey(String... parts) {
        String cacheKey = "";

        for (String part : parts) {
            cacheKey += "#"
                + part.replaceAll("\\\\", "\\\\\\\\").replaceAll("#", "\\\\#");
        }

        return cacheKey;
    }

    /**
     * @param key    a key generated by computeKey
     * @return       <code>true</code> if cache contains key
     */
    public boolean doesExist(String key) {
        return m_cache.containsKey(key);
    }

    /**
     * @param key    a key generated by computeKey
     * @return       the cached object
     */
    public Object lookup(String key) {
        return m_cache.get(key);
    }

    /**
     * @param key    a key generated by computeKey
     * @param value  the object to store
     */
    public void store(String key, Object value) {
        m_cache.put(key, value);
    }
}
