<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.2.xsd">			
	<!-- $Revision$ -->
	<!-- $URL$ -->
	<!-- $Date$ -->
	<!-- $Author$ -->


	<!-- ~~~~~~~~~~~~~~~~~~~~ AUTHENTICATION DEFINITIONS ~~~~~~~~~~~~~~~~~~ -->
	<!-- a alias if any bean needs to directly reference the authenticationManager -->
	<security:authentication-manager alias="authenticationManager"/>
	
	
	
	<!-- 
		The tag <security:custom-authentication-provider /> registers the bean as authentication provider.
		This seems to be the only way to do this when using the global-method-security tag (in security-attributes.xml)
	-->
	<bean id="extendedTestingAuthenticationProvider"
		class="ch.elca.el4j.tests.services.security.provider.ExtendedTestingAuthenticationProvider">
		<security:custom-authentication-provider />
	</bean>	

</beans>
